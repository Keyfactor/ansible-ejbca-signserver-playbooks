---

organizationName: Solitude
organizationNameShort: "{{ organizationName }}"
organizationNameCRL: "{{ organizationName }}"
organizationDomainName: solitude.skyrim
countryName: US
superAdminCn: "30Aug2021-Skyrim-SA"
sharedVarsLocation: ~/ansible/ansibleCacheDir

# If enabled this will configure a publisher for OCSP, OCSP signer key update service, OSCP publishing queue, OCSP publisher to the certificate profiles,
# create Peer connection, and create an auth key binding
use_external_va: true

# If enabled this will configure a Peer connection, and add the RA Peer role to EJBCA 
use_external_ra: true

# If enabled configures a Peer connectiona nd key binding for Sign Server
use_external_ss: false

# Add publishers to the CA's in EJBCA. CA's created before the publisher is added to EJBCA and want to leverage the publisher
# should use this option to add the publisher to the CA.
add_publshers_to_cas: true

# Maria DB settings for using MariaDB database
mariadb_root_password:  "{{ encrypted_database_rootuser_password | default('PrimeKeyPkI4all') }}"
mariadb_binlog_format: ROW
mariadb_databases:
  - name: ejbca
    collation: "utf8_general_ci"
    encoding: "utf8"
mariadb_users:
  - name: ejbca-usr
    password: "{{ encrypted_database_ejbcauser_password | default('ejbca') }}"
    priv: "ejbca.*:ALL"
    host: "%"
  - name: ejbca-usr
    password: "{{ encrypted_database_ejbcauser_password | default('ejbca') }}"
    priv: "ejbca.*:ALL"
    host: "localhost"

# Maria DB JDBC driver download URL
ejbca_jdbc_driver: https://dlm.mariadb.com/1785291/Connectors/java/connector-java-2.7.4/mariadb-java-client-2.7.4.jar
# Maria DB JDBC driver SHA256 hash
ejbca_jdbc_driver_checksum: sha256:f06577b19e89b33028b96cd4f031248e761de7ebc712f4ef535e268df76edb2a

# EJBCA version and deployment info
ejbca_version: 7.7.0
# If enabled Ansible controller is used as software repository for Apache Ant, EJBCA, and JDBC driver
use_local_repository: false
ejbca_remote_dir: ~/Downloads/PK-Software/ejbca_ee_7_7.0.zip
ejbca_software_url: http://172.16.170.133:8080/ejbca/ejbca_ee_7_7_0.zip
ejbca_src_dir_name: ejbca_ee_7_7_0
ejbca_type: CA

# Location to write the CRL files on server
ejbca_crl_dir_enabled: false
ejbca_crl_dir:
  - /opt/web/CRLs
  - /opt/web/AIA

# Wildfly version to deploy, SHA256 hash of the Wildfly archive, whether to disable infinispan, & the datasource 
# configured in Wildfly for EJBCA to access the DB. Can also deploy Wildfly with Galleon.
wildfly_version: 24.0.1.Final
wildfly_checksum: 08d1e420331d0b6ad6c36a4dd782a110152cabfa23439e6ecd9a7c4d50bffd01
wildfly_standalone_file: standalone-24.xml.datasource.j2
wildfly_use_galleon: true
wildfly_galleon_version: 4.2.8
#wildfly_galleon_checksum: sha256:049e1a588882c0c0335a95725c2942bd4e2f56a8743f52eba9eff4a19fda25b1 #4.2.6
wildfly_galleon_checksum: sha256:63ccfb1546fbe32a2222b61e9ae0a594be5f81a4d6e45cd22861eb158a5bfb06
#wildfly_jboss_client_checksum: sha256:fb9b638b04f0e54adc8343daed0fb07d38deadcc7ee8ba48a1c3ac44d9f87cff #WF 23
wildfly_jboss_client_checksum: sha256:cd5b72bbdbb99123a78d9837339f10a849f6c48d8503840cf9ab673cae4039b6 # WF 24
# Disabling only works on Wildfly 20 or earlier, Wildfly 21 and later changed, remoting now requires infinispan cache
wildfly_disable_infinispan: true

# Variables to confgure the Widfly datasource for connecting to the applicable DB
appsrv_datasources:
  - jndi_name: "java:/EjbcaDS"
    pool_name: ejbcads
    database_connection_type: mariadb 
    database_driver_class: org.mariadb.jdbc.Driver
    database_jar_filename: mariadb-java-client.jar
    host: 127.0.0.1
    backup_host: ejbca01.solitude.skyrim
    port: 3306
    database: ejbca
    user: ejbca-usr
    credential_ref: dbPassword
    password: "{{ encrypted_database_ejbcauser_password | default('ejbca') }}"

# Uncomment to configure Wildfly to send logs to a Syslog server 
#appsrv_syslogsources:
#  - name: SYSLOGTCP
#    enabled: true
#    log_level: INFO
#    ejbca_host: my.host
#    syslog_app_name: WildFly
#    syslog_server_address: my.graylog.server
#    syslog_server_port: 514
#    syslog_facility: local-use-1

# HSM Configuration
# Use softhsm for PKCS11
use_softhsm: true
use_ncipher: false
use_safenet_lunasa: false
# Use CloudHSM
use_cloudhsm: false
use_liquidsec: false
# If true, allows running application server service via preload
ncipher_preload: false
# Path to the preload executable
preload_path: /opt/nfast/bin/preload
# HSM PKCS#11 shared library location
# SoftHSM
hsm_shared_library: /usr/lib64/libsofthsm2.so
# CloudHSM
#hsm_shared_library: /opt/cloudhsm/lib/libcloudhsm_pkcs11.so

# CloudHSM settings
cloudhsm_ip: '172.16.2.209'
hsm_config_files: '{{ playbook_dir }}/hsm_config_files'
customerCA_cert: customerCA.crt

softhsm_gen_hsm_slots:
  - slot_name: Management_CA_SLOT
    slot_so_pin: "{{ encrypted_mgmtca_so_token_pin | default('foo123') }}" 
    slot_pin: "{{ encrypted_mgmtca_token_pin | default('foo123') }}"
  - slot_name: Sub_CA_SLOT
    slot_so_pin: "{{ encrypted_subca_so_token_pin | default('foo123') }}"
    slot_pin: "{{ encrypted_subca_token_pin | default('foo123') }}"
  - slot_name: Sub2_CA_SLOT
    slot_so_pin: "{{ encrypted_subca2_so_token_pin | default('foo123') }}"
    slot_pin: "{{ encrypted_subca2_token_pin | default('foo123') }}"
  - slot_name: Sub3_CA_SLOT
    slot_so_pin: "{{ encrypted_subca3_so_token_pin | default('foo123') }}"
    slot_pin: "{{ encrypted_subca3_token_pin | default('foo123') }}"
  - slot_name:  DB_Protect_SLOT
    slot_so_pin: "{{ encrypted_databaseprotection_so_token_pin | default('foo123') }}"
    slot_pin: "{{ encrypted_databaseprotection_token_pin | default('foo123') }}"
  - slot_name: KeyBinding_SLOT
    slot_so_pin: "{{ encrypted_peerkeybind_so_token_pin | default('foo123') }}"
    slot_pin: "{{ encrypted_peerKeyBinding_token_pin | default('foo123') }}"
  - slot_name: LDAP_AUTH_SLOT
    slot_so_pin: "{{ encrypted_ldap_auth_so_token_pin | default('foo123') }}" 
    slot_pin: "{{ encrypted_ldap_auth_token_pin | default('foo123') }}"
  - slot_name: AZURE_AUTH_SLOT
    slot_so_pin: "{{ encrypted_azure_auth_so_token_pin | default('foo123') }}" 
    slot_pin: "{{ encrypted_azure_auth_token_pin | default('foo123') }}"

# EJBCA CLI password to configure for the CLI account
ejbca_conf_cli_default_password: "{{ encrypted_ejbca_cli_password | default('ejbca') }}"
ejbca_conf_ca_cmskeystorepass: "{{ encrypted_ejbca_conf_ca_cmskeystorepass | default('ejbca') }}"

# Parameter specifying IP addresses authorized to access the healthcheck
# servlet. Use ';' for between multiple IPs.
# IPv6 address can be specified, for example 127.0.0.1;0:0:0:0:0:0:0:1.
# "ANY" can be specified to allow any remote IP.
ejbca_conf_healtcheck_authorizedips: 127.0.0.1

# Set this to true to use P11NG with EJBCA 
web_use_p11ng: true

#Enable/Disable DB integrity protection
databaseprotection_enablesign_AuditRecordData: true
databaseprotection_enableverify_AuditRecordData: true

# EJBCA audit log database protection configurations
# slot_index: Index of HSM slot used for database integrity protection
# slot_identifier_type: Type of identifier; SLOT_LABEL
# slot_identifier_value: Name or index of the slot
# signature_algorithm: Algorithm used to sign database rows
# tokenpass: PIN used to access HSM slot. Should be encrypted with Ansible vault
# crypto_token: Specify the keys in a list/dict to generate
#   - key_label: Label of key used for database integrity protection
#     key_size: Size of the key
#     key_type: Type of key; RSA, ECDSA
ejbca_databaseprotection:
  - slot_identifier_type: "SLOT_LABEL"
    slot_identifier_value: DB_Protect_SLOT
    signature_algorithm: SHA256WithRSA
    tokenpass: "{{ encrypted_databaseprotection_token_pin | default('foo123') }}"
    crypto_token:
      - key_label: dbProtect0001
        key_size: 3072
        key_type: "RSA"
        type: dbprotect
      - key_label: "testKey"
        key_size: 1024
        key_type: "RSA"
        type: test

# web.properties file
# Set the hostname for configuring OAuth Reply URL
web_httpserver_hostname: "{{ httpd_identity_info.id_name }}"

# Super Admin accounts to create
management_add_end_entities:
  - username: "SkyrimSuperAdministrator"
    dn: "C={{ countryName }},O={{ organizationName }},OU=Administrators,CN={{ superAdminCn }}"
    caname: "ManagementCA"
    token: "P12"
    password: "{{ encrypted_superadmin_enrollment_code | default('foo123') }}"
    certprofile: adminMgmtCA
    eeprofile: AdminInternal  

# Super Admin entities to add to the Super Admin Role
management_add_administrators:
  - role: "Super Administrator Role"
    caname: "ManagementCA"
    match_with: "WITH_COMMONNAME"
    match_value: "{{ superAdminCn }}"

# Key bindings used for the certificate that peering uses to authenticate to external RA/VA & SignServer
ejbca_keybinding:
  - name: peerClient-ocsp
    crypto_token_name: peeringCryptoToken
    tokentype: Pkcs11NgCryptoToken
    tokenpass: "{{ encrypted_peerKeyBinding_token_pin | default('foo123') }}"
    cryptotoken_enable_auto_activate: true
    slot_identifier_type: "SLOT_LABEL"
    slot_identifier_value: "KeyBinding_SLOT"
    force_used_slots: true
    crypto_token:
      - key_label: "peerKeyBindingOcsp0001"
        key_size: 3072
        key_type: "RSA"
        type: keybind
      - key_label: "testKey"
        key_size: 1024
        key_type: "RSA"
        type: test
    signature_algorithm: SHA256WithRSA
    dn: "C={{ countryName }},OU=Peering,O={{ organizationName }},CN=peerClient-ocsp"
    caname: "ManagementCA"
    token: "USERGENERATED"
    certprofile: tlsPeerConnector
    eeprofile: tlsPeerConnMgmt
    useType: ocsp
    enabled: "{{ use_external_va }}"
  - name: peerClient-ra
    crypto_token_name: peeringCryptoToken
    tokentype: Pkcs11NgCryptoToken
    tokenpass: "{{ encrypted_peerKeyBinding_token_pin | default('foo123') }}"
    cryptotoken_enable_auto_activate: true
    slot_identifier_type: "SLOT_LABEL"
    slot_identifier_value: "KeyBinding_SLOT"
    force_used_slots: true
    crypto_token:
      - key_label: "peerKeyBindingRa0001"
        key_size: 3072
        key_type: "RSA"
        type: keybind
    signature_algorithm: SHA256WithRSA
    dn: "C={{ countryName }},OU=Peering,O={{ organizationName }},CN=peerClient-ra"
    caname: "ManagementCA"
    token: "USERGENERATED"    
    certprofile: tlsPeerConnector
    eeprofile: tlsPeerConnMgmt
    useType: ra
    enabled: "{{ use_external_ra }}"
  - name: peerClient-sign
    crypto_token_name: peeringCryptoToken
    tokentype: Pkcs11NgCryptoToken
    tokenpass: "{{ encrypted_peerKeyBinding_token_pin | default('foo123') }}"
    cryptotoken_enable_auto_activate: true
    slot_identifier_type: "SLOT_LABEL"
    slot_identifier_value: "KeyBinding_SLOT"
    force_used_slots: true
    crypto_token:
      - key_label: "peerKeyBindingSign0001"
        key_size: 3072
        key_type: "RSA"
        type: keybind
    signature_algorithm: SHA256WithRSA
    dn: "C={{ countryName }},OU=Peering,O={{ organizationName }},CN=peerClient-sign"
    caname: "ManagementCA"
    token: "USERGENERATED"
    certprofile: tlsPeerConnector
    eeprofile: tlsPeerConnMgmt
    useType: sign
    enabled: "{{ use_external_ss }}"

# Peer connectors to configure on the CA for connecting to external VA, RA, & SignServer
ejbca_peerConnector:
  - name: OCSP-01
    url: "https://ocsp01.{{ organizationDomainName }}/ejbca/peer/v1"
    keybinding: peerClient-ocsp
    type: ocsp
    state: ENABLED
    remote_key_update: true
    enabled: "{{ use_external_va }}"
  - name: RA-01
    url: "https://ra01.{{ organizationDomainName }}/ejbca/peer/v1"
    keybinding: peerClient-ra
    type: ra
    state: ENABLED
    enabled: "{{ use_external_ra }}"
  - name: Sign-01
    url: "https://sign01.{{ organizationDomainName }}/signserver/peer/v1"
    keybinding: peerClient-sign
    type: sign
    state: ENABLED
    enabled: "{{ use_external_ss }}"
    

# List of certification authorities that should be added using CLI
# caname: CA name
# certprofile: Certificate profile
# dn: CA distinguished name
# subjectaltname: CA subject alt name
# validity: Validity time or end date
# policy: "null" or policy oid
# keytype: RSA, DSA or ECDSA
# keyspec: Size of RSA keys, size of DSA keys or name of curve for ECDSA keys
# signalg: Signature algorithm
# tokentype: "soft" or "org.cesecore.keys.token.PKCS11CryptoToken"
# tokenpass: Password for the CA token
# pkcs11_token: Dict of parameters needed for PKCS11 token
# slot_identifier_type: "SLOT_LABEL", "SLOT_INDEX" or "SLOT_NUMBER"
# slot_identifier_value: Slot identifier
# signkey_label: Signing key label
# defaultkey_label: Default (encryption) key label
# testkey_label: Test key label
# The order must be Management CA and then Root CA
management_add_certification_authorities:
  - caname: "ManagementCA"
    certprofile: "managementCA"
    dn: "CN=ManagementCA,OU=Certification Authorities,O={{ organizationName }},C={{ countryName }}"
    subjectaltname: ""
    validity: "3650"
    validity_yml: "10y"
    policy: "null"
    signalg: "SHA384WithRSA"
    serial_number_octet_size: 20
    pre_produce_ocsp_responses: false
    store_responses_on_demand: false
    use_append_only_table: false
    use_utf8_in_policy_notice_text: false
    defaultCRLDP: "http://crl.{{ organizationDomainName }}/CRLs/{{ organizationName | lower }}-mgmtca.crl"
    #defaultCRLDP: "http://crl.{{ organizationDomainName }}/ejbca/publicweb/webdist/certdist?cmd=crl&issuer=CN%3dManagementCA%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}"
    defaultOCSPServiceLocator: "http://ocsp.{{ organizationDomainName }}/ocsp"
    #authorityInformationAccess: "http://aia.{{ organizationDomainName }}/CertsIssuedTo{{ organizationName }}-mgmtca.p7b"
    #certificateAiaDefaultCaIssuerUri: "http://aia.{{ organizationDomainName }}/CertsIssuedTo{{ organizationName }}-mgmtca.p7b"
    authorityInformationAccess: "http://aia.{{ organizationDomainName }}/ejbca/publicweb/webdist/certdist?cmd=cacert&issuer=CN%3dManagementCA%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}&level=1"
    certificateAiaDefaultCaIssuerUri: "http://aia.{{ organizationDomainName }}/ejbca/publicweb/webdist/certdist?cmd=cacert&issuer=CN%3dManagementCA%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}&level=1"
    crlPeriod: 259200000
    crl_overlap_time: 600000
    crlIssueInterval: 86400000
    crlIssueInterval_yml: 1d
    crlPeriod_yml: 3d
    crl_overlap_time_yml: 10m
    delta_crl_period: 0m
    useLdapDnOrder: false
    enforce_unique_public_keys: true
    enforce_key_renewal: false
    enforce_unique_dn: true
    user_storage: true
    certificate_storage: true
    accept_revocations_for_non_existing_entries: false
    finish_user: true
    ca_healthcheck_enabled: true
    request_processor: null
    cryptotoken_enable_auto_activate: true
    tokentype: "org.cesecore.keys.token.p11ng.cryptotoken.Pkcs11NgCryptoToken"
    tokenpass: "{{ encrypted_mgmtca_token_pin | default('foo123') }}"
    slot_identifier_type: "SLOT_LABEL"
    slot_identifier_value: "Management_CA_SLOT"
    force_used_slots: true
    crypto_token:
      - key_label: "signKey0001"
        key_size: 3072
        key_type: "RSA"
        type: sign
      - key_label: "defaultKey0001"
        key_size: 3072
        key_type: "RSA"
        type: default
      - key_label: "testKey"
        key_size: 1024
        key_type: "RSA"
        type: test
    publishers:
      - validationAuthorityPeerPub-OCSP-01

# List of certification authorities that should be added using CLI
# caname: CA name
# certprofile: Certificate profile
# dn: CA distinguished name
# subjectaltname: CA subject alt name
# validity: Validity time or end date
# policy: "null" or policy oid
# keytype: RSA, DSA or ECDSA
# keyspec: Size of RSA keys, size of DSA keys or name of curve for ECDSA keys
# signalg: Signature algorithm
# tokentype: "soft" or "org.cesecore.keys.token.PKCS11CryptoToken"
# tokenpass: Password for the CA token
# pkcs11_token: Dict of parameters needed for PKCS11 token
# slot_identifier_type: "SLOT_LABEL", "SLOT_INDEX" or "SLOT_NUMBER"
# slot_identifier_value: Slot identifier
# signkey_label: Signing key label
# defaultkey_label: Default (encryption) key label
# testkey_label: Test key label
sub_add_certification_authorities:
  - caname: "{{ organizationNameShort }}-Sub-CA"
    certprofile: "SubCA-{{ organizationNameShort }}-G1"
    dn: "CN={{ organizationName }} Issuing CA G1,OU=Certification Authorities,O={{ organizationName }},C={{ countryName }}"
    rootDn: "CN={{ organizationName }} Root CA G1,OU=Certification Authorities,O={{ organizationName }},C={{ countryName }}"
    root_ca_name: "{{ organizationNameShort }}-Root-CA"
    external_signed_ca_cert_file_local_repository: false
    external_signed_ca_cert_file: "SubCA-{{ organizationNameShort }}-G1.crt"
    subjectaltname: ""
    validity: "3650"
    validity_yml: "10y"
    policy: "null"
    signalg: "SHA384WithRSA"
    serial_number_octet_size: 20
    pre_produce_ocsp_responses: false
    store_responses_on_demand: false
    use_append_only_table: false
    use_utf8_in_policy_notice_text: false
    defaultCRLDP: "http://crl.{{ organizationDomainName }}/CRLs/{{ organizationNameShort | lower }}-subca-g1.crl"
    #defaultCRLDP: "http://crl.{{ organizationDomainName }}/ejbca/publicweb/webdist/certdist?cmd=crl&issuer=CN%3d{{ organizationNameCRL }}+Issuing+CA+G1%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}"
    defaultOCSPServiceLocator: "http://ocsp.{{ organizationDomainName }}/ocsp"
    #authorityInformationAccess: "http://aia.{{ organizationDomainName }}/AIA/CertsIssuedTo{{ organizationNameShort }}-SubCAG1.p7b"
    #certificateAiaDefaultCaIssuerUri: "http://aia.{{ organizationDomainName }}/AIA/CertsIssuedTo{{ organizationNameShort }}-SubCAG1.p7b"
    authorityInformationAccess: "http://aia.{{ organizationDomainName }}/ejbca/publicweb/webdist/certdist?cmd=cacert&issuer=CN%3d{{ organizationNameCRL }}+Issuing+CA+G1%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}&level=1"
    certificateAiaDefaultCaIssuerUri: "http://aia.{{ organizationDomainName }}/ejbca/publicweb/webdist/certdist?cmd=cacert&issuer=CN%3d{{ organizationNameCRL }}+Issuing+CA+G1%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}&level=1"
    crlPeriod: 259200000
    crlPeriod_yml: 3d
    crlIssueInterval: 86400000
    crlIssueInterval_yml: 1d
    crl_overlap_time: 600000
    crl_overlap_time_yml: 10m
    delta_crl_period: 0m
    useLdapDnOrder: false
    enforce_unique_public_keys: true
    enforce_key_renewal: false
    enforce_unique_dn: false
    user_storage: true
    certificate_storage: true
    accept_revocations_for_non_existing_entries: false
    finish_user: true
    ca_healthcheck_enabled: true
    request_processor: null
    cryptotoken_enable_auto_activate: true
    tokentype: "org.cesecore.keys.token.p11ng.cryptotoken.Pkcs11NgCryptoToken"
    tokenpass: "{{ encrypted_subca_token_pin | default('foo123') }}"
    slot_identifier_type: "SLOT_LABEL"
    slot_identifier_value: "Sub_CA_SLOT"
    force_used_slots: true
    crypto_token:
      - key_label: "signKey0001"
        key_size: 3072
        key_type: "RSA"
        type: sign
      - key_label: "defaultKey0001"
        key_size: 3072
        key_type: "RSA"
        type: default
      - key_label: "testKey"
        key_size: 1024
        key_type: "RSA"
        type: test
    publishers:
      - validationAuthorityPeerPub-OCSP-01
      
# CA DN in Web format and filename used to configure cronjob for downloading CRL's and hosting them on webserver
certification_authorities_crl_files:
  - crlfilename: "{{ organizationNameShort | lower }}-mgmtca.crl"
    cadn: "CN%3dManagementCA%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}"
  - crlfilename: "{{ organizationNameShort | lower }}-rootca-g1.crl"
    cadn: "CN%3d{{ organizationNameCRL }}+Root+CA+G1%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}"
  - crlfilename: "{{ organizationNameShort | lower }}-subca-g1.crl"
    cadn: "CN%3d{{ organizationNameCRL }}+Issuing+CA+G1%2cOU%3dCertification+Authorities%2cO%3d{{ organizationNameCRL }}%2cC%3d{{ countryName }}"

# Enrollment protocols to disable on EJBCA
disable_ejbca_protocols:
  - name: ACME
  - name: EST
  - name: OCSP
  - name: SCEP
  #- name: 'RA Web'

# Enrollment protocols to enable on EJBCA
enable_ejbca_protocols:
  - name: Certstore
  - name: CMP
  - name: CRLstore
  - name: 'Public Web'
  - name: 'REST CA Management'
  - name: 'REST Certificate Management'
  - name: 'REST Crypto Token Management'
  - name: Webdist
  - name: 'Web Service'

# CRL Update Service Worker Settings
crl_service_time_int: 1
crl_service_time_unit: HOURS

# Configure the RA Peering requests
ra_peer_max_parallel_reqs: 50
ra_peer_min_parallel_reqs: 2

# Add the management CA to HTTP trust chain file. 
add_mgmt_ca: true

# Create CRL and AIA folder symbolic links for webserver to host these files
httpd_create_aia_crl_dir: false
enable_crl_crontab: false

# Info to create HTTPD end entity in EJBCA for the TLS certificate
httpd_identity_info:
  id_dn: "C={{ countryName }},O={{ organizationName }},OU=Devices,CN=ca01.{{ organizationDomainName }}"
  id_name: "ca01.{{ organizationDomainName }}"
  id_full_dn: "C={{ countryName }},O={{ organizationName }},OU=Devices,CN=ca01.{{ organizationDomainName }}"
  id_username: ca_httpd_tls
  id_password: "{{ encrypted_httpd_identity_password | default('foo123') }}"
  id_altname: "dNSName=ca01.{{ organizationDomainName }}, dNSName=ca.{{ organizationDomainName }}, dNSName=sapi.ca.{{ organizationDomainName }}, dNSName=api.ca.{{ organizationDomainName }}"
  id_certprofile: tlsServerMgmtCA
  id_eeprofile: tlsServerMgmt
  id_caname: ManagementCA

# List of HTTPD certificate files to configure for HTTPD to use for TLS
httpd_cert_files:
  - src: "{{ ejbca_home }}/p12/pem/{{ httpd_identity_info.id_name }}.pem"
    dest: "/etc/pki/tls/certs/{{ httpd_identity_info.id_name }}.crt"
  - src: "{{ ejbca_home }}/p12/pem/{{ httpd_identity_info.id_name }}-Key.pem"
    dest: "/etc/pki/tls/private/{{ httpd_identity_info.id_name }}.key"
  - src: "{{ ejbca_home }}/p12/pem/{{ httpd_identity_info.id_name }}-CA.pem"
    dest: "/etc/pki/tls/certs/chain.crt"

# Used for creating a TLS certificate for the Root CA
identity_info:
  - dn: "C={{ countryName }},O={{ organizationName }},OU=Devices,cn=root01.{{ organizationDomainName }}"
    name: "root01.{{ organizationDomainName }}"
    full_dn: "C={{ countryName }},O={{ organizationName }},OU=Devices,cn=root01.{{ organizationDomainName }}"
    username: root_httpd_tls
    password: "{{ encrypted_httpd_identity_password | default('foo123') }}"
    altname: "dNSName=root01.{{ organizationDomainName }}"
    certprofile: tlsServerMgmtCA
    eeprofile: tlsServerMgmt
    caname: ManagementCA
    token: PEM
    useType: ca

# CA chains to add to the HTTPD trusted CA certificate file for certauth
# caname: Name of the CA in EJBCA
# fullchain: Must be set to true for this to work by getting the issuing CA chain and then adding that chain to the file
httpd_trusted_cas:
  - caname: "ManagementCA"
    fullchain: true
  - caname: "{{ organizationNameShort }}-Sub-CA"
    fullchain: true

# Enable/Disable using the HTTPD CRL mapping to use friendly names in the CRL file that are retreived from 
# EJBCA CRL cache in the ejbca/publicweb/crls/search.cgi
use_httpd_crl_map: true

# The type of hash for the CA DN or the subjectKeyIdentifier, can be one of iHash or sKIDHash
httpd_crl_hash_type: iHash

# List of CRL files without the .crl extension and the iHash value for the CA DN used for friendly names
# in the CRL URL and HTTPD maps the name to the hash value to retrieve the CRL from EJBCA crl cache
# crl_name: file name without the .crl extension, e.g.: managementca
# hash: The CA DN hashed to create the iHash value, e.g.:
# CN=ManagementCA,OU=Certification Authorities,O=Intune Test,C=US has an iHash of QEmnargCJtoJPXtVylHO1T85MF8
# If there is + in the string, e.g.: oavHw1U+TltzeLlBUeuWjDZW7IA, replace this with %2B oavHw1U%2BTltzeLlBUeuWjDZW7IA
httpd_crl_mapping_names:
  - crl_name: "{{ organizationName | lower }}-mgmtca"
    hash: ecpgmaBhnkye/KzqRP2dYlqbHXc
  - crl_name: "{{ organizationNameShort | lower }}-rootca-g1"
    hash: K8WY8UadARfiek83i40zzB02Udw
  - crl_name: "{{ organizationNameShort | lower }}-subca-g1"
    hash: 1vnFSu3sYhgsdaB655sZr/2j21s

# Enable/Disable using the HTTPD CA Cert mapping to use friendly names in the AIA URL to get the CA cert retreived from 
# EJBCA Certificates cache in the ejbca/publicweb/certificates/search.cgi
use_httpd_aia_map: true

# The type of hash for the CA Subject DN or the subjectKeyIdentifier, can be one of sHash or sKIDHash
httpd_aia_hash_type: sHash

# List of CA cert files without the .crt extension and the sHash value for the CA Subject DN used for friendly names
# in the AIA URL and HTTPD maps the name to the hash value to retrieve the CA Cert from EJBCA certificate cache
# aia_name: file name without the .crt extension, e.g.: managementca
# hash: The CA Subject DN hashed to create the sHash value or use the Subject Key ID hash, e.g.:
# CN=ManagementCA,OU=Certification Authorities,O=Intune Test,C=US has an sHash of QEmnargCJtoJPXtVylHO1T85MF8
# If there is + in the string, e.g.: oavHw1U+TltzeLlBUeuWjDZW7IA, replace this with %2B oavHw1U%2BTltzeLlBUeuWjDZW7IA
httpd_aia_mapping_names:
  - aia_name: "{{ organizationName | lower }}-mgmtca"
    hash: ecpgmaBhnkye/KzqRP2dYlqbHXc
  - aia_name: "{{ organizationNameShort | lower }}-rootca-g1"
    hash: K8WY8UadARfiek83i40zzB02Udw
  - aia_name: "{{ organizationNameShort | lower }}-subca-g1"
    hash: 1vnFSu3sYhgsdaB655sZr/2j21s

# List of CA's to export the CA cert from EJBCA CA nodes and import as an external CA into external RA/VA nodes.
# This variable is also used for exporting CRL's from EJBCA CA node to import into external RA/VA's
# caname: Name of the CA in EJBCA
# The superadmincn can be added to each CA to add a Common Name to the superadmin role.
# fullchain: Must be set to false for this to work by getting each CA certificate to import as an external CA
ejbca_ca_import:
  - caname: "ManagementCA"
    superadmincn: "{{ superAdminCn }}"
    fullchain: false
  - caname: "{{ organizationNameShort }}-Sub-CA"
    fullchain: false
  - caname: "{{ organizationNameShort }}-Root-CA"
    fullchain: false

# S3 Publisher settings
install_aws_cli: true
use_aws_s3_publisher: true
aws_s3_publishers:
  - s3_publisher_name: AwsS3Publisher
    # 0=CA CN/SN/O & 1=CA SHA1 Fingerprint
    s3_crl_file_name_format: 0
    s3_cert_key_prefix: ''
    # 0=DER & 1=PEM
    s3_crl_file_format: 1
    # Name of the folder to write the certificates to
    s3_cert_bucket_name:
    # 0=Serial Number, 1=SHA1 Fingerprint, 2=SHA2 Fingerprint
    s3_cert_file_name_format: 0
    s3_crl_key_prefix: ''
    # Store active and revoked Certificates in separate paths
    s3_cert_store_separate_path: true
    # 0=DER & 1=PEM
    s3_cert_file_format: 1
    # Name of teh folder to write the CRLs to
    s3_crl_bucket_name: 
    s3_only_use_in_queue: true
    s3_keep_published_in_queue: false
    s3_use_queue_for_crls: true
    s3_use_queue_for_certs: true
    s3_use_queue_for_ocsp: false
    s3_description: ''

configdump_dir_structure:
  - "{{ ejbca_home }}/dump/dump1/certificate-profiles"
  - "{{ ejbca_home }}/dump/dump1/extended-key-usage"
  - "{{ ejbca_home }}/dump/dump1/certification-authorities"
  - "{{ ejbca_home }}/dump/dump2/certificate-profiles"
  - "{{ ejbca_home }}/dump/dump2/certification-authorities"
  - "{{ ejbca_home }}/dump/dump2/end-entity-profiles"
  - "{{ ejbca_home }}/dump/dump2/services"
  - "{{ ejbca_home }}/dump/dump2/custom-certificate-extensions"
  - "{{ ejbca_home }}/dump/dump3/admin-roles"
  - "{{ ejbca_home }}/dump/dump3/certificate-profiles"
  - "{{ ejbca_home }}/dump/dump3/end-entity-profiles"
  - "{{ ejbca_home }}/dump/dump3/services"
  - "{{ ejbca_home }}/dump/dump3/publishers"
  - "{{ ejbca_home }}/dump/dump3/acme-config"
  - "{{ ejbca_home }}/dump/dump3/est-config"
  - "{{ ejbca_home }}/dump/dump3/scep-config"
  - "{{ ejbca_home }}/dump/va/services"
  - "{{ ejbca_home }}/dump/va/publishers"  
  - "{{ ejbca_home }}/dump/ra/admin-roles" 
  - "{{ ejbca_home }}/dump/awsS3/publishers"

configdump_files:
  - src: 'cp-managementCA.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump1/certificate-profiles/ManagementCA.yaml'
  - src: 'extended-key-usages.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump1/extended-key-usage/extended-key-usages.yaml'
    # Files for the 2nd dump import
  - src: 'cp-tlsPeerConnector.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump2/certificate-profiles/tlsPeerConnector.yaml'
  - src: 'ee-tlsPeerConnMgmt.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump2/end-entity-profiles/tlsPeerConnMgmt.yaml'
  - src: 'service-DailyCRLUpdate.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump2/services/DailyCRLUpdate.yaml'
  - src: 'service-HSM_Keepalive.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump2/services/HSM_Keepalive.yaml'
  - src: 'ext-certTempInfo.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump2/custom-certificate-extensions/certTempInfo.yaml'
    # Files for the 3rd dump import
  - src: 'global-acme-configuration.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/acme-config/global-acme-configuration.yaml'
  - src: 'acme-alias-1.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/acme-config/acme-alias-1.yaml'
  - src: 'ee-AdminInternal.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/AdminInternal.yaml'
  - src: 'ee-tlsServerAcme.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/tlsServerAcme.yaml'
  - src: 'ee-tlsServerOrg.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/tlsServer{{ organizationNameShort }}.yaml'
  - src: 'ee-ocspSigner.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/ocspSigner.yaml'
  - src: 'ee-tlsServerMgmt.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/tlsServerMgmt.yaml'
  - src: 'ee-userAuthentication.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/userAuthentication.yaml'
  - src: 'ee-userDigitalSignature.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/userDigitalSignature.yaml'
  - src: 'ee-userEncryption.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/userEncryption.yaml'
  - src: 'ee-intuneDevice.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/intuneDevice.yaml'
  - src: 'ee-tlsServerApprovalOrg.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/tlsServerApproval{{ organizationNameShort }}.yaml'
  - src: 'ee-codeSigning.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/codeSigning.yaml'
  - src: 'ee-domainController.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/domainController.yaml'
  - src: 'ee-estDevice.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/estDevice.yaml'
  - src: 'ee-remoteDesktopAuth.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/remoteDesktopAuth.yaml'
  - src: 'ee-scepDevice.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/scepDevice.yaml'
  - src: 'ee-signersOrg.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/signers{{ organizationNameShort }}.yaml'
  - src: 'ee-timeStampingAuthority.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/timeStampingAuthority.yaml'
  - src: 'ee-vpnFirewall.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/vpnFirewall.yaml'
  - src: 'ee-workstations.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/end-entity-profiles/workstations.yaml'
  - src: 'cp-tlsServerMgmtCA.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/tlsServerMgmtCA.yaml'
  - src: 'cp-AdminNoCDPMgmtCA.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/AdminNoCDPMgmtCA.yaml'
  - src: 'cp-tlsClientAuth.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/tlsClientAuth.yaml'
  - src: 'cp-tlsServerAuth.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/tlsServerAuth.yaml'
  - src: 'cp-tlsServerClientAuth.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/tlsServerClientAuth.yaml'
  - src: 'cp-adminMgmtCA.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/adminMgmtCA.yaml'
  - src: 'cp-DigitalSignature-2048.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/DigitalSignature-2048.yaml'
  - src: 'cp-Authentication-2048.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/Authentication-2048.yaml'
  - src: 'cp-Encryption-2048.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/Encryption-2048.yaml'
  - src: 'cp-tlsServerAuthAcme90d.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/tlsServerAuthAcme90d.yaml'
  - src: 'cp-ocspSigner.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/ocspSigner.yaml'
  - src: 'cp-ocspSignerEcc-15d.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/ocspSignerEcc-15d.yaml'
  - src: 'cp-intuneClientAuth-1y.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/intuneClientAuth-1y.yaml'
  - src: 'cp-tlsServerAuthApproval.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/tlsServerAuthApproval.yaml'
  - src: 'cp-tlsClientAuthApproval.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/tlsClientAuthApproval.yaml'
  - src: 'cp-tlsServerClientAuthApproval.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/tlsServerClientAuthApproval.yaml'
  - src: 'cp-signerCodeSigning.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/signerCodeSigning.yaml'
  - src: 'cp-signerTimeStampAuthority.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/signerTimeStampAuthority.yaml'
  - src: 'cp-signerPdf-3y.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/signerPdf-3y.yaml'
  - src: 'cp-signer-3y.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/signer-3y.yaml'
  - src: 'cp-domainController.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/domainController.yaml'
  - src: 'cp-remoteDesktopAuth.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/remoteDesktopAuth.yaml'
  - src: 'cp-vpnFirewall.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/vpnFirewall.yaml'
  - src: 'cp-workstation.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/certificate-profiles/workstation.yaml'
  - src: 'est-device.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/est-config/device.yam'
  - src: 'est-firewall.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/est-config/firewall.yaml'
  - src: 'scep-device.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/scep-config/device.yaml'
  - src: 'scep-firewall.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/scep-config/firewall.yaml'
  - src: 'role-userEnrollment.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/admin-roles/role-userEnrollment.yaml'
  - src: 'role-ra-est.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/admin-roles/role-ra-est.yaml'
  - src: 'role-ra-vault.yaml.j2'
    dest: '{{ ejbca_home }}/dump/dump3/admin-roles/role-ra-vault.yaml'
    # Files for External VA
  - src: 'service-ocspService.yaml.j2'
    dest: '{{ ejbca_home }}/dump/va/services/ocspService.yaml'
    # Files for External RA
  - src: 'role-ra-peer-connection.yaml.j2'
    dest: '{{ ejbca_home }}/dump/ra/admin-roles/role-ra-peer-connection.yaml'