---

- name: Query crypto tokens
  command: "{{ ejbca_home }}/bin/ejbca.sh cryptotoken list"
  no_log: true
  become: yes
  become_user: "{{ ejbca_user }}"
  register: cryptoToken_list
  changed_when: false

- name: Create cryptotoken for peering key binding
  command: "{{ ejbca_home }}/bin/ejbca.sh cryptotoken create --token {{ item.name }} --pin {{ item.slot_pin }} --autoactivate true --type {{ item.type }} --lib {{ hsm_shared_library }} --slotlabel {{ item.slot_label }} --slotlabeltype {{ item.slot_identifier_type }}"
  loop: "{{ ejbca_peer_crypto_token }}"
  no_log: true
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_cryptotoken
  failed_when: keybinding_cryptotoken.rc >= 2
  #changed_when: keybinding_cryptotoken.rc == 0
  when: ( item.name not in cryptoToken_list.stdout ) and ( use_external_va|bool or use_external_ra|bool or use_external_ss|bool)

- name: Query Key Binding
  command: "{{ ejbca_home }}/bin/ejbca.sh keybind list"
  no_log: true
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_list
  changed_when: false

- name: Create key binding 
  command: "{{ ejbca_home }}/bin/ejbca.sh keybind create --name {{ item.name }} --type AuthenticationKeyBinding --token {{ item.crypto_token_name }} --status ACTIVE  --alias {{ item.key_label }}  --sigalg {{ item.signature_algorithm }} --cert null"
  loop: "{{ ejbca_keybinding }}"
  no_log: true
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_create
  failed_when: keybinding_create.rc >= 2
  #changed_when: keybinding_create.rc == 0
  when: ( item.name not in keybinding_list.stdout ) and ( item.enabled|bool )

- name: Create CSR for key binding 
  command: "{{ ejbca_home }}/bin/ejbca.sh keybind gencsr --name {{ item.name }} -f /var/tmp/{{ item.name }}.csr"
  args:
    creates: "/var/tmp/{{ item.name }}.csr"
  loop: "{{ ejbca_keybinding }}"
  no_log: true
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_create_csr
  failed_when: keybinding_create_csr.rc >= 2
  #changed_when: keybinding_create_csr.rc == 0
  when: ( item.name not in keybinding_list.stdout ) and ( item.enabled|bool )

- name: Add key binding end entity
  command: >
    "{{ ejbca_home }}/bin/ejbca.sh" ra addendentity
    --username "{{ item.name }}"
    --dn "{{ item.dn }}"
    --caname "{{ item.caname }}"
    --type 1
    --token {{ item.token }}
    --password {{ item.password }}
    --certprofile {{ item.certprofile }}
    --eeprofile {{ item.eeprofile }}
  loop: "{{ ejbca_keybinding }}"
  no_log: true
  become_method: sudo
  become_user: "{{ ejbca_user }}"
  register: adding_keybind_end_entity
  failed_when: adding_keybind_end_entity.rc >= 2
  #changed_when: adding_keybind_end_entity.rc == 0
  when: ( item.name not in keybinding_list.stdout ) and ( item.enabled|bool )
 
#- debug:
#    msg: "Adding end entity failed with message: {{ item.stdout }}"
#  when: item.rc == 1 
#  loop: "{{ adding_keybind_end_entity.results }}"
#  loop_control:
#    label: "{{ item.item.name }}"
  
- name: Sign CSR for key binding 
  command: "{{ ejbca_home }}/bin/ejbca.sh createcert --username {{ item.name }}  --password {{ item.password }} -c /var/tmp/{{ item.name }}.csr -f /var/tmp/{{ item.name }}.crt"
  args:
    creates: "/var/tmp/{{ item.name }}.crt"
  loop: "{{ ejbca_keybinding }}"
  no_log: true
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_sign_csr
  failed_when: keybinding_sign_csr.rc >= 2
  #changed_when: keybinding_sign_csr.rc == 0
  when: ( item.name not in keybinding_list.stdout ) and ( item.enabled|bool )

- name: Import cert for key binding 
  command: "{{ ejbca_home }}/bin/ejbca.sh keybind import --name {{ item.name }} -f /var/tmp/{{ item.name }}.crt"
  loop: "{{ ejbca_keybinding }}"
  no_log: true
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_import_cert
  failed_when: keybinding_import_cert.rc >= 2
  #changed_when: keybinding_import_cert.rc == 0
  when: ( item.name not in keybinding_list.stdout )  and ( item.enabled|bool )

- name: Activate key binding 
  command: "{{ ejbca_home }}/bin/ejbca.sh keybind setstatus --name {{ item.name }} -v Active"
  loop: "{{ ejbca_keybinding }}"
  no_log: true
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_setstatus
  failed_when: keybinding_setstatus.rc >= 2
  #changed_when: keybinding_setstatus.rc == 0
  when: ( item.name not in keybinding_list.stdout ) and ( item.enabled|bool )

# TODO - Figure out why this can't be set via CLI, but works by setting in the UI
#- name: Set Next Key Pair Alias 
#  command: "{{ ejbca_home }}/bin/ejbca.sh keybind modify --name {{ item.name }} --nextkeypair {{ item.key_label }}"
#  no_log: true
#  become: yes
#  become_user: "{{ ejbca_user }}"
#  register: keybinding_modify
#  loop: "{{ ejbca_keybinding }}"
#  when: item.name not in keybinding_list.stdout

- name: Determine certificate serial number
  command: "openssl x509 -noout -serial -in /var/tmp/{{ item.name }}.crt"
  loop: "{{ ejbca_keybinding }}"
  no_log: true
  register: cert_serialNumber
  when: item.enabled|bool

- name: Create fact for certificate serial numbers
  set_fact: 
    cacheable: yes
    peer_cert_serial_numbers: |
      [
      {% for line in cert_serialNumber.results %}
      {% if line.stdout is defined %}
      {{ '{' }}  'serial':'{{ line.stdout.split('=')[1] }}', 'name':'{{ line.item.name }}', 'type':'{{ line.item.useType}}', 'ca':'{{ line.item.caname}}' {{ '}' }},
      {% endif %}
      {% endfor %}
      ]

#- name: Create fact for certificate serial numbers
#  set_fact: 
#    cacheable: yes
#    peer_cert_serial_numbers: 
#      - cert_serial_Number: "{{ line.stdout.split('=')[1] }}"
#        name: "{{ line.item.name }}"
#        type: "{{ line.item.useType}}"

- name: Create local directories
  become: no
  file:
    path: "{{ ejbca_csr_dir_output }}"
    state: directory
  delegate_to: localhost

- name: Write cert serial numbers to file for use with EJBCA VA or RA playbooks 
  become: no
  copy:
    dest: "{{ ejbca_csr_dir_output }}/peer_cert_serial_numbers.yml"
    content: "{{ peer_cert_serial_numbers| to_nice_yaml }}"
  delegate_to: localhost
  register: write_the_output
  no_log: true

- name: Write cert serial numbers to shared vars directory for use with EJBCA VA or RA playbooks 
  become: no
  copy:
    dest: "{{ sharedVarsLocation }}/peer_cert_serial_numbers.yml"
    content: "{{ peer_cert_serial_numbers| to_nice_yaml }}"
  delegate_to: localhost
  register: write_the_output2
  #no_log: true
