---
# tasks file for roles/ansible-ejbca-deploy-pki-ca-node-mgmt-ca

- name: Prepare configdump template files
  include_role: 
    name: ansible-ejbca-cnfdump-stage
    tasks_from: config_configdump

- name: Check deployment
  include_role: 
    name: ansible-ejbca-restart-wildfly
  vars:
    restart_wildfly: true
  tags: check_deployment

- name: Use Configdump to create the ManagementCA
  block:

    - name: Create crypto token for the ManagementCA
      include_role: 
        name: ansible-ejbca-crypto-token
        tasks_from: add_crypto_token
      loop: "{{ management_add_certification_authorities }}"
      no_log: true

    - name: Generate keys for the ManagementCA on crypto token
      include_role:
        name: ansible-ejbca-crypto-token
        tasks_from: generate_keys
      loop: "{{ management_add_certification_authorities |subelements('crypto_token') }}"
      loop_control:
        label: "{{ key_item.0.caname }}"
        loop_var: key_item
      no_log: true
      tags: key_generation

    - name: Stage ManagementCA to create with configdump
      include_role:
        name: ansible-ejbca-cnfdump-stage
        tasks_from: stage_ca
      vars:
        dump_dest: "{{ ejbca_home }}/dump/dump1/certification-authorities/{{ item.caname }}.yaml"
      loop: "{{ management_add_certification_authorities }}"
      loop_control:
        label: "{{ item.caname }}"
      no_log: true

    - name: Intialize ManagementCA with configdump
      command: >
        ./configdump.sh import 
        --ignore-errors 
        --overwrite update 
        --non-interactive continue 
        -l {{ ejbca_home }}/dump/dump1 
        --initialize
      args:
        chdir: "{{ ejbca_home }}/dist/configdump"
      become: yes 
      become_user: "{{ ejbca_user }}"

  when: 
    - deploy_with_configdump|bool and management_add_certification_authorities[0] is defined 

- name: Use CLI to create the ManagementCA
  block:

    - name: Import configdump of CA templates and EKU's
      command: >
        ./configdump.sh import 
        --ignore-errors 
        --overwrite update 
        --non-interactive continue 
        -l {{ ejbca_home }}/dump/dump1
      args:
        chdir: "{{ ejbca_home }}/dist/configdump"
      become: yes 
      become_user: "{{ ejbca_user }}"
      
    - name: Create crypto tokens for ManagementCA
      include_role: 
        name: ansible-ejbca-crypto-token
        tasks_from: add_crypto_token
      loop: "{{ management_add_certification_authorities }}"
      no_log: true
      #when:
      #  - ("soft" in item.tokentype)

    - name: Generate keys for ManagementCA on crypto token
      include_role:
        name: ansible-ejbca-crypto-token
        tasks_from: generate_keys
      loop: "{{ management_add_certification_authorities |subelements('crypto_token') }}"
      loop_control:
        label: "{{ key_item.0.caname }}"
        loop_var: key_item
      no_log: true
      tags: key_generation
      #when:
      #  - ("soft" in key_item.0.tokentype)

    - name: Initialize ManagementCA with CLI commands
      include_role:
        name: ansible-ejbca-init-ca
        tasks_from: init_ca
      loop: "{{ management_add_certification_authorities }}"
      no_log: true
      tags: create_cas

    - name: Configure ManagmentCA settings
      include_role: 
        name: ansible-ejbca-conf-ca-exts
        tasks_from: config_ca_extensions
      loop: "{{ management_add_certification_authorities }}"
      no_log: true

  when: 
    - management_add_certification_authorities[0] is defined and not deploy_with_configdump|bool

- name: Import configdump of profiles and services
  command: >
    ./configdump.sh import 
    --ignore-errors 
    --overwrite update 
    --non-interactive continue 
    -l {{ ejbca_home }}/dump/dump2
  args:
    chdir: "{{ ejbca_home }}/dist/configdump"
  become: yes 
  become_user: "{{ ejbca_user }}"

- name: Configure EJBCA Enrollment protocols
  include_role:
    name: ansible-ejbca-enroll-protocols
  when: 
    - disable_ejbca_protocols[0] is defined or enable_ejbca_protocols[0] is defined

- name: Export Managmement CA certificate
  include_role:
    name: ansible-ejbca-certreq-cli
    tasks_from: get_ca_certs
  vars:
    ejbca_ca_import:
      - caname: "ManagementCA"
        superadmincn: "{{ superAdminCn }}"
        fullchain: false
  loop: "{{ ejbca_ca_import }}"
  loop_control:
    label: "{{ item.caname }}"

- name: Check if local directory {{ ejbca_csr_dir_output }} exists
  stat:
    path: "{{ ejbca_csr_dir_output }}"
  register: ejbca_csr_dir_output_exists
  changed_when: false

- name: Create local directory for {{ ejbca_csr_dir_output }}
  become: no
  file:
    path: "{{ ejbca_csr_dir_output }}"
    state: directory
  delegate_to: localhost
  when: not ejbca_csr_dir_output_exists.stat.exists

- name: Add PKI Admin end entities
  include_role:
    name: ansible-ejbca-certreq-cli
    tasks_from: batch_cert_request
  loop: "{{ management_add_end_entities }}"
  loop_control:
    label: "{{ item.username }}"
  when: 
    - management_add_end_entities[0] is defined

- name: Add PKI administrators to roles
  include_role:
    name: ansible-ejbca-roles
    tasks_from: add_to_role
  loop: "{{ management_add_administrators }}"
  loop_control:
    label: "{{ item.match_value }}"
  when: 
    - management_add_administrators[0] is defined

- name: Copy superadmin.p12 to local server
  fetch:
    src: "{{ ejbca_home }}/p12/{{ item.username }}.p12"
    dest: "{{ superadmin_local_dir|default('~/Desktop') }}/"
    flat: yes
  loop: "{{ management_add_end_entities }}"
  no_log: true
  register: copy_down_profile

- name: Add Root Node TLS end entity
  include_role:
    name: ansible-ejbca-certreq-cli
    tasks_from: batch_cert_request
  loop: "{{ identity_info }}"
  loop_control:
    label: "{{ item.username }}"
  when: 
    - create_root_tls_cert|bool

