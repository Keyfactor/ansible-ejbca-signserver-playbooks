---

- block:
    - name: Add environment variables to {{ ejbca_user }} user profile
      template:
        src: user_profile.j2
        dest: "{{ ejbca_user_profile }}/.bash_profile"
        owner: "{{ ejbca_user }}"
        group: "{{ ejbca_user }}"

    - name: Check if {{ ejbca_user }} owns the {{ ejbca_home }} directory
      stat:
        path: "{{ ejbca_root_dir }}/{{ ejbca_src_dir_name }}"
      register: primekey_owns_it

    - name: Set file permissions for {{ ejbca_home }}
      file:
        path: "{{ ejbca_home }}"
        state: directory
        recurse: yes
        owner: "{{ ejbca_user }}"
        group: "{{ ejbca_group }}"
      when: ejbca_user not in primekey_owns_it.stat.pw_name

  when: ejbca_manage_user

- name: Create ejbca-custom/conf directory
  file:
    path: "{{ ejbca_home }}/../ejbca-custom/conf"
    state: directory
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"

- name: Create ejbca-custom/p12 directory
  file:
    path: "{{ ejbca_home }}/../ejbca-custom/p12"
    state: directory
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"

- name: Ensure statedump package is unpacked if statedump is being built
  unarchive:
    src: "{{ ejbca_statedump_src }}"
    dest: "{{ ejbca_home }}/modules/"
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"
    creates: "{{ ejbca_home }}/modules/statedump"
  when: ejbca_build_statedump | bool
  register: unpacked_statedump

- name: Create the directories for CRL & AIA 
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"
  loop: "{{ ejbca_crl_dir }}"
  when: ejbca_crl_dir_enabled|bool

- name: Check if Elytron Credential store pass exists
  stat:
    path: "{{ wildfly_elytron_pass_file }}"
  register: elytron_pass_file_exists

- name: Check if Elytron Credential store file exists
  stat:
    path: "{{ wildfly_home }}/standalone/configuration/credentials"
  register: elytron_store_file_exists

- name: Elytron Credential store configuration
  block:
    - name: Create directory
      file:
        path: "{{ wildfly_elytron_pass_dir }}"
        state: directory
        owner: "{{ ejbca_user }}"
        group: "{{ ejbca_group }}"
        mode: 0700

    - name: Create fact
      set_fact:
        cred_pass: "{{ pass_33 }}"
      no_log: true

    - name: Create file
      template:
        src: wildfly_pass.j2
        dest: "{{ wildfly_elytron_pass_file }}"
        owner: "{{ ejbca_user }}"
        group: "{{ ejbca_group }}"
        mode: 0700

    - name: Create credential store
      command: "{{ wildfly_home }}/bin/elytron-tool.sh credential-store --create --location {{ wildfly_home }}/standalone/configuration/credentials --password {{ cred_pass }}"
      become: yes  
      become_user: "{{ ejbca_user }}"
      args:
        creates: "{{ wildfly_home }}/standalone/configuration/credentials"
      no_log: true

    - name: Add Database password to credential store
      command: "{{ wildfly_home }}/bin/elytron-tool.sh credential-store --location {{ wildfly_home }}/standalone/configuration/credentials --password {{ cred_pass }} --add {{ item.credential_ref }} --secret {{ item.password }}"
      become: yes  
      become_user: "{{ ejbca_user }}"
      loop: "{{ appsrv_datasources }}"
      no_log: true

  when: 
    - not elytron_pass_file_exists.stat.exists
    - not elytron_store_file_exists.stat.exists

- name: Deploy Wildfly standalone.xml
  template:
    src: "{{ wildfly_standalone_file }}"
    dest: "{{ wildfly_home }}/standalone/configuration/standalone.xml"
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"

- name: Configure EJBCA cache configuration in persistence-ds-template.xml
  template:
    src: persistence-ds-template.xml.j2
    dest: "{{ ejbca_home }}/modules/ejbca-entity/resources/persistence-ds-template.xml"
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"
  when: wildfly_disable_infinispan|bool

- name: Ensure templated EJBCA properties files are copied to ejbca-custom/conf
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"
  loop: "{{ ejbca_templated_properties_files }}"
  loop_control:
    label: "{{ item.src }}"
  register: configured_ejbca_properties

- name: Register properties files in ejbca-custom/conf
  find:
    paths: "{{ ejbca_home }}/../ejbca-custom/conf/"
    patterns: "*.properties"
  register: found_properties_files

- name: Register properties files that has a matching sample file in EJBCA conf directory
  stat:
    path: "{{ ejbca_home }}/conf/{{ item }}.sample"
  register: found_properties_files_with_matching_sample
  loop: "{{ found_properties_files.files | map(attribute='path') | map('basename') | list }}"

- name: Set variable properties files to be removed using (properties files in ejbca-custom | intersect (properties files with matching sample)) | difference(templated properties files)
  set_fact:
    ejbca_properties_files_to_remove: "{{ ( found_properties_files.files | map(attribute='path') | map('basename') | list | intersect (found_properties_files_with_matching_sample.results | selectattr('stat.path', 'defined') | map(attribute='item') | list )) | difference(ejbca_templated_properties_files | map(attribute='dest') | map('basename') | list ) }}"

- name: Ensure that default EJBCA properties files not in list of templated EJBCA properties files are removed
  block:
  - name: Ensure existing properties files not in list of templated EJBCA properties files are removed from ejbca-custom/conf folder
    file:
      path: "{{ ejbca_home }}/../ejbca-custom/conf/{{ item }}"
      state: absent
    loop: "{{ ejbca_properties_files_to_remove }}"

  - name: Ensure existing properties files not in list of templated EJBCA properties files are removed from ejbca/conf folder
    file:
      path: "{{ ejbca_home }}/conf/{{ item }}"
      state: absent
    loop: "{{ ejbca_properties_files_to_remove }}"
    register: removed_ejbca_properties
  when: ejbca_properties_files_to_remove

- name: Check if application server exists
  stat:
    path: "{{ wildfly_home }}"
  register: found_appsrv_home

- name: Build EJBCA EAR file when application server exists
  command: >
    ant clean build
    {% if ejbca_build_configdump %}configdump{% endif %}
    {% if ejbca_build_statedump %}statedump{% endif %}
  become: yes
  become_user: "{{ ejbca_user }}"
  environment:
    EJBCA_HOME: "{{ ejbca_home }}"
    APPSRV_HOME: "{{ wildfly_home }}"
  args:
    chdir: "{{ ejbca_home }}"
  when:
    - found_appsrv_home.stat.exists
    - unpacked_ejbca.changed or configured_ejbca_properties.changed or removed_ejbca_properties.changed or unpacked_statedump.changed or ejbca_force_build_ear

- name: Copy EJBCA EAR file to application server when application server exists
  copy:
    src: "{{ ejbca_home }}/dist/ejbca.ear"
    remote_src: yes
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"
    dest: "{{ wildfly_home }}/standalone/deployments/ejbca.ear"