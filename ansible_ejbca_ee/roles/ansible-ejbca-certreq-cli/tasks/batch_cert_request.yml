---

- name: Check if {{ item.username }} end entity exists
  command: "{{ ejbca_sh }} ra findendentity {{ item.username }}"
  args:
    chdir: "{{ ejbca_home }}"
  become_method: sudo
  become_user: "{{ ejbca_user }}"
  changed_when: false
  failed_when: false
  register: endentity_exists
  tags: certreq-cli-batch

#- debug:
#    var: endentity_exists

- debug:
    msg: "Failed to query username: {{ endentity_exists.stdout }}"
  when: 
    - "'FAILED' in endentity_exists.stderr"
  failed_when: true

- block:
  - name: Add {{ item.username }} Entity to CA
    command: >
      {{ ejbca_sh }} ra addendentity 
      --username '{{ item.username }}' 
      --password '{{  item.password }}' 
      --dn {% if item.full_dn is defined %}'{{ item.full_dn }}'{% else %}'{{ item.dn }}'{% endif %}
      {% if item.altname is defined %}--altname '{{ item.altname }}'{% endif %}
      --caname '{{ item.caname }}' 
      --type 1 
      --token {{ item.token }} 
      --certprofile '{{ item.certprofile }}' 
      --eeprofile '{{ item.eeprofile }}'
    args:
      chdir: "{{ ejbca_home }}"
    become_user: "{{ ejbca_user }}"
    become: yes
    register: ra_addIdent_result
    tags: certreq-cli-batch
    no_log: true
    failed_when: ra_addIdent_result.rc >= 2
    changed_when: ra_addIdent_result.rc == 0

  - name: Set password for {{ item.username }}
    command: >
      {{ ejbca_sh }} ra setclearpwd 
      --username '{{ item.username }}' 
      --password '{{ item.password }}'
    args:
      chdir: "{{ ejbca_home }}"
    become_user: "{{ ejbca_user }}"
    become: yes
    register: ra_setpwd_result
    tags: certreq-cli-batch
    no_log: true
    failed_when: ra_setpwd_result.rc >= 2
    changed_when: ra_setpwd_result.rc == 0

  - name: Create certs for {{ item.username }}
    command: >
      {{ ejbca_sh }} batch 
      --username {{ item.username }} 
      -dir {% if item.token is defined and 'PEM' == item.token %}{{ identity_batch_output_dir }}{% else %}{{ ejbca_home }}/p12/{% endif %}
    args:
      chdir: "{{ ejbca_home }}"
    become_user: "{{ ejbca_user }}"
    become: yes
    register: ra_batch_result
    tags: certreq-cli-batch
    no_log: true
    failed_when: ra_batch_result.rc >= 2
    changed_when: ra_batch_result.rc == 0

  - name: Determine {{ item.username }} certificate serial number
    command: "openssl x509 -noout -serial -in {{ identity_batch_output_dir }}/pem/{{ item.name }}.pem"
    no_log: true
    register: cert_serialNumber
    tags: certreq-cli-batch
    when: 
      - (ejbca_type == "RA") or (ejbca_type == "VA")

  - name: Create fact for RA {{ item.username }} certificate serial number
    set_fact: 
      cacheable: yes
      ra_peer_cert_serial_numbers: |
        [
        {{ '{' }}  'cert_serial_Number':'{{ cert_serialNumber.stdout.split('=')[1] }}', 'caname':'{{ item.caname }}' {{ '}' }},
        ]
    tags: certreq-cli-batch
    when:
      - ejbca_src_dir_name is defined 
      - ejbca_type == "RA"

  - name: Add serial number to Peering Admin Role
    command: >
      {{ ejbca_sh }} roles addrolemember 
      --role 'RA-Peer-Connection' 
      --caname '{{ item.caname }}' 
      --with CertificateAuthenticationToken:WITH_SERIALNUMBER 
      --value '{{ cert_serialNumber.stdout.split('=')[1] }}'
    args:
      chdir: "{{ ejbca_home }}"
    #loop: "{{ ra_peer_cert_serial_numbers }}"
    become_user: "{{ ejbca_user }}"
    become: yes
    register: add_sn_to_role_result
    tags: ra_peer_sn_role, certreq-cli-batch
    when:
      - ejbca_src_dir_name is defined 
      - ejbca_type == "RA"

  #- name: Create fact for certificate serial numbers
  #  set_fact: 
  #    cacheable: yes
  #    ra_peer_cert_serial_numbers: |            
  #      "{{ ra_peer_cert_serial_numbers|default([]) + [ {'cert_serial_Number':cert_serialNumber.stdout.split('=')[1], 'caname':item.caname} ] }}"
  #  tags: certreq-cli-batch
  
  - name: Create fact for VA {{ item.username }} certificate serial number
    set_fact: 
      cacheable: yes
      va_peer_cert_serial_numbers: |
        [
        {{ '{' }}  'cert_serial_Number':'{{ cert_serialNumber.stdout.split('=')[1] }}', 'caname':'{{ item.caname }}' {{ '}' }},
        ]
    tags: certreq-cli-batch
    when: 
      - ejbca_src_dir_name is defined
      - ejbca_type == "VA"

  - name: Copy {{ item.username }} certificate file to localhost
    become: no
    fetch:
      src: "{{ identity_batch_output_dir }}/pem/{{ item.name }}.pem"
      dest: "{{ ejbca_csr_dir_output }}/{{ item.name }}.crt"
      flat: yes
    tags: certreq-cli-batch
    when:
      - item.token == 'PEM' 

  - name: Copy {{ item.username }} key file to localhost
    become: no
    fetch:
      src: "{{ identity_batch_output_dir }}/pem/{{ item.name }}-Key.pem"
      dest: "{{ ejbca_csr_dir_output }}/{{ item.name }}.key"
      flat: yes
    tags: certreq-cli-batch
    when:
      - item.token == 'PEM' 

  - name: Copy {{ item.username }} CA chain file to localhost
    become: no
    fetch:
      src: "{{ identity_batch_output_dir }}/pem/{{ item.name }}-CA.pem"
      dest: "{{ ejbca_csr_dir_output }}/{{ item.caname }}.crt"
      flat: yes
    tags: certreq-cli-batch
    when:
      - item.token == 'PEM' 

  - name: Write RA cert serial numbers to file for use with EJBCA VA or RA playbooks 
    become: no
    copy:
      dest: "{{ ejbca_csr_dir_output }}/ra_peer_cert_serial_numbers.yml"
      content: "{{ ra_peer_cert_serial_numbers| to_nice_yaml }}"
    delegate_to: localhost
    register: write_the_output
    no_log: true
    tags: certreq-cli-batch
    when: 
      - ra_peer_cert_serial_numbers is defined

  - name: Write VA cert serial numbers to file for use with EJBCA VA or RA playbooks 
    become: no
    copy:
      dest: "{{ ejbca_csr_dir_output }}/va_peer_cert_serial_numbers.yml"
      content: "{{ va_peer_cert_serial_numbers| to_nice_yaml }}"
    delegate_to: localhost
    register: write_the_output
    no_log: true
    tags: certreq-cli-batch
    when:
      - va_peer_cert_serial_numbers is defined

  - name: Cleanup the cert files in /var/tmp
    file:
      path: "{{ identity_batch_output_dir }}/pem/"
      state: absent
    tags: certreq-cli-batch
    when:
      - item.token == 'PEM'

  when: "'does not exist' in endentity_exists.stdout"
  #when: endentity_exists.rc == 1
  tags: certreq-cli-batch
