# {{ ansible_managed | comment }}
# Configuration of  an extended CMS signer {{ main_item.0.id }}. 
# Capable of timestamping in addition to the features provided by the regular CMS signer.

## General properties
WORKER{{ main_item.0.id }}.TYPE=PROCESSABLE
WORKER{{ main_item.0.id }}.IMPLEMENTATION_CLASS=org.signserver.module.extendedcmssigner.ExtendedCMSSigner

WORKER{{ main_item.0.id }}.NAME={{ main_item.0.name }}
WORKER{{ main_item.0.id }}.AUTHTYPE={{ main_item.0.AuthType }}

# Crypto token
WORKER{{ main_item.0.id }}.CRYPTOTOKEN={{ main_item.0.CryptoToken }}
#WORKER{{ main_item.0.id }}.CRYPTOTOKEN=CryptoTokenP11
#WORKER{{ main_item.0.id }}.CRYPTOTOKEN=CryptoTokenP11NG1
#WORKER{{ main_item.0.id }}.CRYPTOTOKEN=CryptoTokenP11NG1KeyWrapping

# Using key from sample keystore
WORKER{{ main_item.0.id }}.DEFAULTKEY={{ main_item.1.keyalias }}
# Key using ECDSA
#WORKER{{ main_item.0.id }}.DEFAULTKEY=signer00002

# If the content should be encapsulated or not
WORKER{{ main_item.0.id }}.DETACHEDSIGNATURE={{ main_item.0.detached_signature }}
#WORKER{{ main_item.0.id }}.DETACHEDSIGNATURE=TRUE

# If the requester should be able to decide about including the content or not
WORKER{{ main_item.0.id }}.ALLOW_DETACHEDSIGNATURE_OVERRIDE={{ main_item.0.detached_signature_override }}

# If the signer should by default use client-side hashing (the request data
# to the signer is implied to be the pre-computed digest), this requires
# the ACCEPTED_HASH_DIGEST_ALGORITHMS property to be set
WORKER{{ main_item.0.id }}.CLIENTSIDEHASHING={{ main_item.0.client_side_hashing }}

# If the signer should allow overriding whether the request is using a client-
# side digest or not (by a request metadata parameter)
WORKER{{ main_item.0.id }}.ALLOW_CLIENTSIDEHASHING_OVERRIDE={{ main_item.0.allow_clientsidehashing_override }}

# Accepted digest hash algorithms used when the request is using a client-side
# hash, this is required if any of CLIENTSIDEHASHING,
# or ALLOW_CLIENTSIDEHASHING_OVERRIDE is defined and set to "true"
WORKER{{ main_item.0.id }}.ACCEPTED_HASH_DIGEST_ALGORITHMS={{ main_item.0.accepted_hash_digest_algorithms |default('true') }}

# If a digest of the request should be computed and logged
# Default: false
WORKER{{ main_item.0.id }}.DO_LOGREQUEST_DIGEST={{ main_item.0.Do_LogRequest_Digest |default('false') }}

# The digest algorithm to use for the request in the log
# Default: SHA256
WORKER{{ main_item.0.id }}.LOGREQUEST_DIGESTALGORITHM={{ main_item.0.LogRequest_DefaultAlgorithm |default('SHA256') }}

# If a digest of the response should be computed and logged
# Default: false
WORKER{{ main_item.0.id }}.DO_LOGRESPONSE_DIGEST={{ main_item.0.Do_LogResponse_Digest |default('false') }}

# The digest algorithm to use for the request in the log
# Default: SHA256
WORKER{{ main_item.0.id }}.LOGRESPONSE_DIGESTALGORITHM={{ main_item.0.LogResponse_DigestAlgorithm |default('SHA256') }}

# Worker name or ID of internal (RFC#3161) timestamp authority
# Default: none
#WORKER{{ main_item.0.id }}.TSA_WORKER=TimeStampSigner
{% if main_item.0.Tsa_Worker is defined and main_item.0.Tsa_Worker|length %}
WORKER{{ main_item.0.id }}.TSA_WORKER={{ main_item.0.Tsa_Worker }}
{% endif %}

# URL of external (RFC#3161) timestamp authority
# Default: none
#WORKER{{ main_item.0.id }}.TSA_URL=http://tsa.example.com/TimeStampSigner
{% if main_item.0.Tsa_Url is defined and main_item.0.Tsa_Url|length %}
WORKER{{ main_item.0.id }}.TSA_URL={{ main_item.0.Tsa_Url }}
{% endif %}

# Username for authentication with the TSA
# Default: none
WORKER{{ main_item.0.id }}.TSA_USERNAME=

# Password for authentication with the TSA
# Default: none
WORKER{{ main_item.0.id }}.TSA_PASSWORD=

# Time-stamping policy OID to request from the TSA
# Default: none
WORKER{{ main_item.0.id }}.TSA_POLICYOID=

# Digest algorithm to use for timestamps
# Default: SHA-256
WORKER{{ main_item.0.id }}.TSA_DIGESTALGORITHM=

# If the key usage counter is disabled
WORKER{{ main_item.0.id }}.DISABLEKEYUSAGECOUNTER={{ main_item.0.DisableKeyUsageCounter |default('true') }}

## Archiving properties

# Using the base 64 archiver
WORKER{{ main_item.0.id }}.ARCHIVERS=org.signserver.server.archive.base64dbarchiver.Base64DatabaseArchiver

# Using the old database archiver
#{{ main_item.0.id }}.ARCHIVERS=org.signserver.server.archive.olddbarchiver.OldDatabaseArchiver

# Archiving only requests
#{{ main_item.0.id }}.ARCHIVER0.ARCHIVE_OF_TYPE=REQUEST

# Archiving only responses
#{{ main_item.0.id }}.ARCHIVER0.ARCHIVE_OF_TYPE=RESPONSE

# Archiving both requests and responses
WORKER{{ main_item.0.id }}.ARCHIVER0.ARCHIVE_OF_TYPE=REQUEST_AND_RESPONSE

# Store forwarded address (from the X-Forwarded-For header) as the request address
#{{ main_item.0.id }}.ARCHIVER0.USE_FORWARDED_ADDRESS=true

# Include additional forwarded addresses (apart from the last), only applies if the property above is set
#{{ main_item.0.id }}.ARCHIVER0.MAX_FORWARDED_ADDRESSES=3

# Included direct (non-forwarded address) at the end of forwarded addresses
#{{ main_item.0.id }}.ARCHIVER0.INCLUDE_DIRECT_ADDRESS=true