# {{ ansible_managed | comment }}
# Configuration of MSAuthCodeSigner {{ main_item.0.id }}.
#

## General properties

WORKER{{ main_item.0.id }}.TYPE=PROCESSABLE
WORKER{{ main_item.0.id }}.IMPLEMENTATION_CLASS=org.signserver.module.msauthcode.signer.MSAuthCodeSigner

WORKER{{ main_item.0.id }}.NAME={{ main_item.0.name }}
# Authentication. One of NOAUTH, CLIENTCERT, org.signserver.server.UsernamePasswordAuthorizer, org.signserver.server.UsernameAuthorizer
WORKER{{ main_item.0.id }}.AUTHTYPE={{ main_item.0.AuthType }}

# Crypto token: CryptoTokenP12, CryptoTokenP11, CryptoTokenP11NG1, CryptoTokenP11NG1KeyWrapping
WORKER{{ main_item.0.id }}.CRYPTOTOKEN={{ main_item.0.CryptoToken }}


# Using key from sample keystore
WORKER{{ main_item.0.id }}.DEFAULTKEY={{ main_item.1.keyalias }}
# Key using ECDSA
#{{ main_item.0.id }}.DEFAULTKEY=code00002

{% if inventory_hostname in groups['eeSignServers'] %}
# Allow peering with EJBCA
WORKER{{ main_item.0.id }}.PEERS_VISIBLE={{ main_item.0.peer_enable |default('true') }}
{% endif %}

# Program name to embed in the signature
# Default: none
#{{ main_item.0.id }}.PROGRAM_NAME=My Application
### if  main_item.0.Program_Name is defined and main_item.0.Program_Name|length ### 
{% if  main_item.0.Program_Name is defined %}
WORKER{{ main_item.0.id }}.PROGRAM_NAME={{ main_item.0.Program_Name }}
{% endif %}

# If the requester should be able to override the program name
# Default: false
#{{ main_item.0.id }}.ALLOW_PROGRAM_NAME_OVERRIDE=false
### if  main_item.0.Allow_Program_Name_Override is defined and main_item.0.Allow_Program_Name_Override|length ### 
{% if  main_item.0.Allow_Program_Name_Override is defined %}
WORKER{{ main_item.0.id }}.ALLOW_PROGRAM_NAME_OVERRIDE={{ main_item.0.Allow_Program_Name_Override }}
{% endif %}

# Program URL to embed in the signature
# Default: none
#{{ main_item.0.id }}.PROGRAM_URL=https://example.com/my-application.html
### if  main_item.0.Program_Url is defined and main_item.0.Program_Url|length ### 
{% if  main_item.0.Program_Url is defined %}
WORKER{{ main_item.0.id }}.PROGRAM_URL={{ main_item.0.Program_Url }}
{% endif %}

# If the requester should be able to override the program URL
# Default: false
#{{ main_item.0.id }}.ALLOW_PROGRAM_URL_OVERRIDE=false
### if  main_item.0.Allow_Program_Url_Override is defined and main_item.0.Allow_Program_Url_Override|length ### 
{% if  main_item.0.Allow_Program_Url_Override is defined %}
WORKER{{ main_item.0.id }}.ALLOW_PROGRAM_URL_OVERRIDE={{ main_item.0.Allow_Program_Url_Override }}
{% endif %}

# Signature algorithm
# Default: SHA256 with RSA, DSA or ECDSA depending on key, value: SIGNATUREALGORITHM=SHA256withRSA, SHA256withDSA, SHA256withECDSA
WORKER{{ main_item.0.id }}.SIGNATUREALGORITHM={{ main_item.0.SignatureAlgorithm |default('SHA256WithRSA') }}

# Algorithm for the digest of the binary
# Default: SHA256
#Values: SHA-1, SHA-256
WORKER{{ main_item.0.id }}.DIGESTALGORITHM={{ main_item.0.DigestAlgorithm |default('SHA256') }}

# Worker ID or name of internal timestamp signer in the same SignServer
# Default: none
#{{ main_item.0.id }}.TSA_WORKER=MSAuthCodeTimeStampSigner
### if  main_item.0.Tsa_Worker is defined and main_item.0.Tsa_Worker|length ### 
{% if  main_item.0.Tsa_Worker is defined %}
WORKER{{ main_item.0.id }}.TSA_WORKER={{ main_item.0.Tsa_Worker }}
{% endif %}

# URL of external timestamp authority
# Default: none
#{{ main_item.0.id }}.TSA_URL=http://tsa.example.com/TimeStampSigner
### if  main_item.0.Tsa_Url is defined and main_item.0.Tsa_Url|length ### 
{% if  main_item.0.Tsa_Url is defined %}
WORKER{{ main_item.0.id }}.TSA_URL={{ main_item.0.Tsa_Url }}
{% endif %}

# Username for authentication with the TSA
# Default: none
WORKER{{ main_item.0.id }}.TSA_USERNAME=

# Password for authentication with the TSA
# Default: none
WORKER{{ main_item.0.id }}.TSA_PASSWORD=

# Time-stamping policy OID to request from the TSA
# Default: none
### if  main_item.0.TsaPolicyOid is defined and main_item.0.TsaPolicyOid|length ### 
{% if  main_item.0.TsaPolicyOid is defined %}
WORKER{{ main_item.0.id }}.TSA_POLICYOID={{ main_item.0.TsaPolicyOid }}
{% endif %}

# The timestamp format to use
# It should correspond to the type of timestamp worker being used
# (Microsoft Authenticode format, or RFC 3161-compliant format).
# Default: AUTHENTICODE
# Values: AUTHENTICODE, RFC3161
WORKER{{ main_item.0.id }}.TIMESTAMP_FORMAT={{ main_item.0.Timestamp_Format |default('AUTHENTICODE') }}

# If a digest of the request should be computed and logged
# Default: true
# Values: true, false
WORKER{{ main_item.0.id }}.DO_LOGREQUEST_DIGEST={{ main_item.0.Do_LogRequest_Digest |default('true') }}

# The digest algorithm to use for the request in the log
# Default: SHA256
WORKER{{ main_item.0.id }}.LOGREQUEST_DIGESTALGORITHM={{ main_item.0.LogRequest_DefaultAlgorithm |default('SHA256') }}

# If a digest of the response should be computed and logged
# Default: true
# Values: true, false
WORKER{{ main_item.0.id }}.DO_LOGRESPONSE_DIGEST={{ main_item.0.Do_LogResponse_Digest |default('true') }}

# The digest algorithm to use for the request in the log
# Default: SHA256
WORKER{{ main_item.0.id }}.LOGRESPONSE_DIGESTALGORITHM={{ main_item.0.LogResponse_DigestAlgorithm |default('SHA256') }}

# If the key usage counter is disabled
WORKER{{ main_item.0.id }}.DISABLEKEYUSAGECOUNTER={{ main_item.0.DisableKeyUsageCounter |default('true') }}

## Archiving properties

# Using the base 64 archiver
WORKER{{ main_item.0.id }}.ARCHIVERS=org.signserver.server.archive.base64dbarchiver.Base64DatabaseArchiver

# Using the old database archiver
#{{ main_item.0.id }}.ARCHIVERS=org.signserver.server.archive.olddbarchiver.OldDatabaseArchiver

# Archiving only requests
#{{ main_item.0.id }}.ARCHIVER0.ARCHIVE_OF_TYPE=REQUEST

# Archiving only responses
#{{ main_item.0.id }}.ARCHIVER0.ARCHIVE_OF_TYPE=RESPONSE

# Archiving both requests and responses
WORKER{{ main_item.0.id }}.ARCHIVER0.ARCHIVE_OF_TYPE=REQUEST_AND_RESPONSE

# Store forwarded address (from the X-Forwarded-For header) as the request address
#{{ main_item.0.id }}.ARCHIVER0.USE_FORWARDED_ADDRESS=true

# Include additional forwarded addresses (apart from the last), only applies if the property above is set
#{{ main_item.0.id }}.ARCHIVER0.MAX_FORWARDED_ADDRESSES=3

# Included direct (non-forwarded address) at the end of forwarded addresses
#{{ main_item.0.id }}.ARCHIVER0.INCLUDE_DIRECT_ADDRESS=true
