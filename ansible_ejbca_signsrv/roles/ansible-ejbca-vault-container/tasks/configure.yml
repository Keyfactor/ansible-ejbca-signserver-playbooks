---

- name: Disable Firewalld for Docker
  become: yes
  service: 
    name: firewalld
    state: stopped
    enabled: no
  register: disable_firewalld

- name: Restart docker service
  become: yes
  service:
    name: docker
    state: restarted
    enabled: yes
  when: disable_firewalld.changed

- name: Check if vault config directory exists
  become: no
  stat:
    path: "{{ vault_cfg_dir }}/config"
  register: vault_cfg_dir_status

- name: Create vault file structure
  become: no
  file:
    path: "{{ item }}"
    state: directory
  loop: "{{ vault_volume_dirs }}"
  when: not vault_cfg_dir_status.stat.exists

- name: Download and unpack Vault Custom plugins
  become: no
  unarchive:
    src: "{{ item.url }}"
    dest: "{{ vault_plugin_dir }}"
    remote_src: yes
  loop: "{{ vault_plugin_download_urls }}"  
  register: unpacked_vault_plugin
  when: vault_plugin_download_urls[0] is defined

- name: Create Vault config files
  become: no
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop: "{{ vault_conf_files }}"
  loop_control:
    label: "{{ item.dest }}"

- name: Download TLS CA certificate chain for EJBCA
  become: no
  uri:
    url: "{{ item.cert_download_url }}"
    validate_certs: no
    dest: "{{ item.cert_file_location }}"
    creates: "{{ item.cert_file_location }}"
    #owner: "{{ tomcat_user }}"
    #group: "{{ tomcat_group }}"
  loop: "{{ tls_certifate_chain }}"
  loop_control:
    label: "{{ item.caname }}"

- name: Copy cert files from Controller
  become: no
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    #owner: "{{ tomcat_user }}"
    #group: "{{ tomcat_group }}"
  loop: "{{ id_cert_files }}"
  loop_control:
    label: "{{ item.dest }}"
  register: file_copy    

- name: Merge cert and key files
  become: no
  assemble:
    src: "{{ item.dir }}"
    dest: "{{ item.file }}"
    remote_src: yes
  loop: "{{ merge_id_cert_files }}"
  loop_control:
    label: "{{ item.name }}"

#- name: Start vault container
#  become: no
#  docker_compose:
#    project_src: "{{ vault_cfg_dir }}"
#  register: dock_result
#  ignore_errors: yes

#- name: Check the variable
#  debug:
#    var: dock_result

- name: Try to start docker container again
  become: yes
  command: /usr/local/bin/docker-compose up -d
  args:
    chdir: "{{ vault_cfg_dir }}"
  #when: 'false' in dock_result.services.vault.state.running 