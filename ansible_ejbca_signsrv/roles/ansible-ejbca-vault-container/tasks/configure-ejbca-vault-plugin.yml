---

#- name: Copy cert files from Controller
#  become: no
#  copy:
#    src: "{{ item.src }}"
#    dest: "{{ item.dest }}"
    #owner: "{{ tomcat_user }}"
    #group: "{{ tomcat_group }}"
#  loop: "{{ id_cert_files }}"
#  loop_control:
#    label: "{{ item.dest }}"
#  register: file_copy

#- name: Merge cert and key files
#  become: no
#  assmble:
#    src: "{{ item.dir }}"
#    dest: "{{ item.file }}"
#    remote_src: yes
#  loop: "{{ merge_id_cert_files }}"
#  loop_control:
#    label: "{{ item.name }}"

#- name: Download TLS CA certificate chain for vault plugin
#  become: no
#  uri:
#    url: "{{ item.cert_download_url }}"
#    validate_certs: no
#    dest: "{{ item.cert_file_location }}"
#    creates: "{{ item.cert_file_location }}"
#    #owner: "{{ tomcat_user }}"
#    #group: "{{ tomcat_group }}"
#  loop: "{{ tls_certifate_chain }}"
#  loop_control:
#    label: "{{ item.caname }}"
  #no_log: "{{ no_log_value }}" 

#- name: Login to vault
#  command: "{{ vault_cli_dir }}/vault login {{ lookup('file', '{{ root_token_dir_output }}/rootkey') }} -format=json"
#  environment:
#    VAULT_ADDR: "{{ vault_local_addr }}"
#  register: vault_login_status
#  no_log: "{{ no_log_value }}"

- name: Create EJBCA instance in Vault
  become: no
  command: "{{ vault_cli_dir }}/vault write {{ item.vault_path }}/config/{{ item.name }} pem_bundle=@{{ item.pem_bundle }} url={{ item.url }} cacerts=@{{ item.tls_certifate_chain }} caname={{ item.caname }} certprofile={{ item.certprofile }} eeprofile={{ item.eeprofile }}"
  args:
    chdir: "{{ vault_cli_dir }}"
  environment:
    VAULT_ADDR: "{{ vault_local_addr }}"
  loop: "{{ vault_ejbca_instances }}"
  loop_control:
    label: "{{ item.name }}"
  register: create_ejbca_instance_vault
