---

- name: Create vault local unseal directories
  become: no
  file:
    path: "{{ item }}"
    state: directory
  delegate_to: localhost
  loop: "{{ vault_local_dir_output }}"

- name: Check if vault is initialized
  become: no
  command: "{{ vault_cli_dir }}/vault status -format=json"
  environment:
    VAULT_ADDR: "{{ vault_local_addr }}"
  register: vault_status
  changed_when: False
  failed_when: "'FAILED' in vault_status.stderr"

#- debug:
#    var: vault_status

- name: Create fact of output from vault status
  set_fact:
    vault_staus_parsed: "{{ vault_status.stdout | from_json }}"

#- name: debug
#  debug:
#    var: vault_staus_parsed

- name: Get vault going
  block:
    - name: Initialise Vault operator
      become: no
      command: "{{ vault_cli_dir }}/vault operator init -key-shares=5 -key-threshold=3 -format json"
      environment:
        VAULT_ADDR: "{{ vault_local_addr }}"
      register: vault_init_results

    #- name: debug
    #  debug:
    #    var: vault_init_results

    - name: Create fact of output from vault init
      set_fact:
        vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

    #- name:
    #  debug:
    #    var: vault_init_parsed

    - name: Write vault unseal keys to individual files
      become: no
      copy:
        dest: "{{ unseal_keys_dir_output }}/unseal_key_{{ my_idx }}"
        content: "{{ item }}"
      loop: "{{ vault_init_parsed.unseal_keys_hex }}"
      loop_control:
        index_var: my_idx
      delegate_to: localhost
      register: the_output
      no_log: true

    #- name: debug
    #  debug:
    #    var: the_output

    - name: Write root token/password to file
      become: no
      copy:
        content: "{{ vault_init_parsed.root_token }}"
        dest: "{{root_token_dir_output}}/rootkey"
      delegate_to: localhost

    - name: Unseal vault with unseal keys
      become: no
      command: "{{ vault_cli_dir }}/vault operator unseal {{ item }}"
      environment:
        VAULT_ADDR: "{{ vault_local_addr }}"
      loop: "{{ vault_init_parsed.unseal_keys_hex }}"
      loop_control:
        index_var: my_idx
      when: my_idx < 3
      register: unseal_output
      no_log: true
      #ignore_errors: yes

    #- name: debug
    #  debug:
    #    var: unseal_output
  when: not vault_staus_parsed.initialized

- name: Prepare vault policies
  become: no
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop: "{{ vault_role_policies }}"
  register: vault_policies

- name: Login to vault
  become: no
  #command: "{{ vault_cli_dir }}/vault login {{ vault_init_parsed.root_token }} -format json"
  command: "{{ vault_cli_dir }}/vault login {{ lookup('file', '{{ root_token_dir_output }}/rootkey') }} -format=json"
  environment:
    VAULT_ADDR: "{{ vault_local_addr }}"
  register: vault_login_status
  no_log: true
  #when: vault_policies.changed

#- debug:
#    var: vault_login_status

- name: Add vault policies to vault
  become: no
  command: "{{ vault_cli_dir }}/vault policy write {{ item.name }} {{ item.dest }}"
  environment:
        VAULT_ADDR: "{{ vault_local_addr }}"
  loop: "{{ vault_role_policies }}"
  register: add_vault_policies
  when: vault_policies.changed

- name: Check if Sub CA already exists
  become: no
  command: "{{ vault_cli_dir }}/vault read {{ vault_int_pki_name }}/cert/ca -format=json"
  environment:
    VAULT_ADDR: "{{ vault_local_addr }}"
  register: vault_subca_exists
  changed_when: False
  failed_when: "'FAILED' in vault_subca_exists.stderr"

#- debug:
#    var: vault_subca_exists

- name: Create the Vault Sub CA
  block:

    - name: Enable vault PKI
      become: no
      command: "{{ vault_cli_dir }}/vault secrets enable pki"
      environment:
        VAULT_ADDR: "{{ vault_local_addr }}"

    - name: Create Sub CA
      become: no
      command: "{{ vault_cli_dir }}/vault secrets enable -path={{ vault_int_pki_name }} pki"
      environment:
        VAULT_ADDR: "{{ vault_local_addr }}"

    - name: Create Sub CA CSR
      become: no
      command: "{{ vault_cli_dir }}/vault write -format=json {{ vault_int_pki_name }}/intermediate/generate/internal {{ vault_int_ca_dn }} key_bits='{{ vault_int_ca_keysize }}' -format=json"
      environment:
        VAULT_ADDR: "{{ vault_local_addr }}"
      register: vault_subca_result

    - name: Create fact of output from vault Sub CA CSR
      set_fact:
        vault_subca_csr_parsed: "{{ vault_subca_result.stdout | from_json }}"

    #- name: debug
    #  debug:
    #    var: vault_subca_csr_parsed

    - name: Write Sub CA CSR to file
      become: no
      copy:
        content: "{{ vault_subca_csr_parsed.data.csr }}"
        dest: "{{ vault_csr_dir_output }}/{{ vault_int_pki_name }}.csr"
      delegate_to: localhost
  when: not vault_subca_exists.stderr.find('No value found')
