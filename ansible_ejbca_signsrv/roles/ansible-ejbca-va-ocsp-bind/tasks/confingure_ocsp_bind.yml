---

- name: Find what certificate files are on the Ansible Controller
  find:
    path: "{{ ejbca_csr_dir_output }}"
    file_type: file
    recurse: yes
    patterns: '*.crt'
  register: find_local_cert_files_result
  become: no
  delegate_to: localhost
  run_once: true
  
#- name: Debug find_local_cert_files_result
#  debug:
#    var: find_local_cert_files_result

#- name: Debug find_local_cert_files_result
#  debug:
#    msg: "{{ item.path }}"
#  loop: "{{ find_local_cert_files_result.files }}"
#  loop_control:
#    label: "{{ item.path | basename | splitext | first }}"

#- name: Debug ejbca_va_keybinding
#  debug:
#    var: ejbca_va_keybinding

- name: Initialize empty fact for ocsp_signer_cert_files
  set_fact:
    ocsp_signer_cert_files: []

- name: Create a fact of all the Cert files on the controller
  set_fact:
    ocsp_signer_cert_files: "{{ ocsp_signer_cert_files + [item.0.path | basename] }}"
  loop: "{{ find_local_cert_files_result.files | product(ejbca_va_keybinding) | list if find_local_cert_files_result is iterable else []}}"
  loop_control:
    label: "{{ item.1.name }}"
  when:
    - item.0.path | basename | splitext | first == item.1.name
  register: ocsp_signer_cert_files_result

#- name: Debug ocsp_signer_cert_files_result
#  debug:
#    var: ocsp_signer_cert_files_result

#- name: Debug ocsp_signer_cert_files
#  debug:
#    var: ocsp_signer_cert_files

- name: Copy certificate files from Controller
  copy:
    src: "{{ ejbca_csr_dir_output }}/{{ item }}"
    dest: "{{ identity_batch_output_dir }}/{{ item }}"
    owner: "{{ ejbca_user }}"
    group: "{{ ejbca_group }}"
  #loop: "{{ ejbca_va_keybinding }}"
  #loop: "{{ local_ocsp_signer_cert_files|zip(ejbca_va_keybinding)|list }}"
  loop: "{{ ocsp_signer_cert_files }}"
  loop_control:
    label: "{{ item }}.crt"
  register: file_copy
  #no_log: "{{ no_log_value }}"

# TODO Add when to upload if cert is on the controller then check serial number of the cert
- name: Determine OCSP Signer certificate serial number
  command: "openssl x509 -noout -serial -in {{ identity_batch_output_dir }}/{{ item }}"
  loop: "{{ ocsp_signer_cert_files }}"
  register: ocsp_cert_serialNumber
  tags: certreq-cli-batch

# TODO If a cert is there upload it, then check if there is a serial number on the key binding. 
# Then check if the serial number matches the cert uploded 
# If no match Import the cert

- name: Query the Internal Key Bindings
  command: "{{ ejbca_sh }} keybind list"
  become: yes
  become_user: "{{ ejbca_user }}"
  register: ocsp_keybinding_exists
  failed_when: ocsp_keybinding_exists.rc >= 2
  changed_when: false

#- name: Debug ocsp_keybinding_exists
#  debug:
#    var: ocsp_keybinding_exists

- name: Import certificate file to OCSP key binding
  command: >
    {{ ejbca_sh }} keybind import 
    --name {{ item | splitext | first }} 
    -f {{ identity_batch_output_dir }}/{{ item }}
  become: yes
  become_user: "{{ ejbca_user }}"
  register: ocsp_keybinding_import
  #loop: "{{ ejbca_va_keybinding }}"
  #loop: "{{ find_local_cert_files_result | product(ejbca_va_keybinding) | list if find_local_cert_files_result is iterable else []}}"
  loop: "{{ ocsp_signer_cert_files }}"
  loop_control:
    label: "{{ item | splitext | first }}"
  #no_log: "{{ no_log_value }}"

# TODO If imported then activate, or check if activated and activate if not activated

- name: Activate OCSP key binding
  command: >
    {{ ejbca_sh }} keybind setstatus 
    --name {{ item | splitext | first }} 
    ACTIVE
  become: yes
  become_user: "{{ ejbca_user }}"
  register: ocsp_keybinding_setstatus
  failed_when: ocsp_keybinding_setstatus.rc >= 2
  #loop: "{{ ejbca_va_keybinding }}"
  loop: "{{ ocsp_signer_cert_files }}"
  loop_control:
    label: "{{ item | splitext | first }}"
  #no_log: "{{ no_log_value }}"



#TODO - Figure out why this can't be set via CLI, but works by setting in the UI
#- name: Set Next Key Pair Alias 
#  command: "{{ ejbca_sh }} keybind modify --name {{ item.name }} --nextkeypair {{ item.key_label }}"
#  no_log: "{{ no_log_value }}"
#  become: yes
#  become_user: "{{ ejbca_user }}"
#  register: keybinding_modify
#  loop: "{{ ejbca_va_keybinding }}"
#  when: item.name not in keybinding_exists.stdout