# {{ ansible_managed | comment }}
# Properties in file:
#
# databaseprotection.keyid.0 = (keyid)
# databaseprotection.keylabel.0 (key label to use)
# databaseprotection.classname.0 = (classname, ex org.cesecore.keys.token.SoftCryptoToken)
# databaseprotection.properties.0 = (serialized token properties)
# databaseprotection.data.0 = (base64 encoded token data)
# databaseprotection.tokenpin.0 = userpin1 (activation code for crypto token). Could be obfuscated with '$signsrv_home/ECA-2655_5_0/bin/ejbca.sh encryptpwd'
# databaseprotection.version.0 = 2 (1 = HMACSHA256, 2 = public-key crypto specified in sigalg property below. Keys pointed by label must match this)
# databaseprotection.sigalg.0 = SHA256WithRSA (signature algorithm to use, you can also use e.g. SHA256WithECDSA)
#
# Multiple crypto tokens can be repeated by using xx.1 etc, where keyid is an integer, defined by you.
# this makes it possible to start using a new crypto token with new keys, while still being able to verify older protected rows.

# Default false, don't use database integrity protection by default because it requires configuration
# You can include or exclude protection for different database tables.
# Note that the names (like AuditRecordData) is not the name of the database table, but the name of the implementing Java class.
# Most of the times it's the same but not always. See all mappings in modules/ejbca-entity/resources/orm-ejbca-mysql.xml
#databaseprotection.enablesign = false
#databaseprotection.enableverify = false
databaseprotection.enablesign.AuditRecordData = {{ databaseprotection_enablesign_AuditRecordData| default('false') }}
databaseprotection.enableverify.AuditRecordData = {{ databaseprotection_enableverify_AuditRecordData| default('false') }}
#databaseprotection.enablesign = true
#databaseprotection.enableverify = true
#databaseprotection.enablesign.GlobalConfigurationData = false
#databaseprotection.enableverify.GlobalConfigurationData = false

# Should the application stop working if we can not verify a row in the database? Default true.
#databaseprotection.erroronverifyfail = true

# The id of the token that should be used for protection of new and updated database rows
# You can configure different keys for different database tables.
databaseprotection.keyid = 1
databaseprotection.keyid.AuditRecordData = 1

databaseprotection.keyid.0 = 1
databaseprotection.keylabel.0 = {{ signsrv_databaseprotection.key_label }}
databaseprotection.classname.0 = org.cesecore.keys.token.PKCS11CryptoToken
databaseprotection.properties.0 = sharedLibrary={{ signsrv_databaseprotection.hsm_shared_library }}, slotLabelType=SLOT_LABEL, slotLabelValue={{ signsrv_databaseprotection.slot_label }}
databaseprotection.tokenpin.0 = {{ signsrv_databaseprotection.token_pin }}
databaseprotection.version.0 = 2
databaseprotection.sigalg.0 = {{ signsrv_databaseprotection.signature_algorithm }}
