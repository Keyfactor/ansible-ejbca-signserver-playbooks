---

- name: Check if {{ item.username }} end entity exists
  command: "{{ ejbca_sh }} ra findendentity {{ item.username }}"
  args:
    chdir: "{{ ejbca_home }}"
  become: yes
  become_user: "{{ ejbca_user }}"
  changed_when: false
  failed_when: false
  register: endentity_exists
  tags: certreq-cli-batch

#- debug:
#    var: endentity_exists

- debug:
    msg: "Failed to query username: {{ endentity_exists.stdout }}"
  when: 
    - "'FAILED' in endentity_exists.stderr"
  failed_when: true

- name: Create the entity in EJBCA and generate a certificate
  block:

  - name: Add {{ item.username }} Entity to CA
    command: >
      {{ ejbca_sh }} ra addendentity 
      --username '{{ item.username }}' 
      --password '{{  item.password }}' 
      --dn {% if item.full_dn is defined %}'{{ item.full_dn }}'{% else %}'{{ item.dn }}'{% endif %}
      {% if item.altname is defined %}--altname '{{ item.altname }}'{% endif %}
      --caname '{{ item.caname }}' 
      --type 1 
      --token {{ item.token }} 
      --certprofile '{{ item.certprofile }}' 
      --eeprofile '{{ item.eeprofile }}'
    args:
      chdir: "{{ ejbca_home }}"
    become_user: "{{ ejbca_user }}"
    become: yes
    register: ra_addIdent_result
    tags: certreq-cli-batch
    no_log: "{{ no_log_value }}"
    failed_when: ra_addIdent_result.rc >= 2
    changed_when: ra_addIdent_result.rc == 0

  - name: Set password for {{ item.username }}
    command: >
      {{ ejbca_sh }} ra setclearpwd 
      --username '{{ item.username }}' 
      --password '{{ item.password }}'
    args:
      chdir: "{{ ejbca_home }}"
    become_user: "{{ ejbca_user }}"
    become: yes
    register: ra_setpwd_result
    tags: certreq-cli-batch
    no_log: 
    failed_when: ra_setpwd_result.rc >= 2
    changed_when: ra_setpwd_result.rc == 0

  - name: Create certs for {{ item.username }}
    command: >
      {{ ejbca_sh }} batch 
      --username {{ item.username }} 
      {% if item.token is defined and 'PEM' == item.token and item.useType is defined %}
      {% if 'ra' == item.useType or 'va' == item.useType or 'root' == item.useType or 'signserver' == item.useType %}
      -dir {{ identity_batch_output_dir }} 
      {% endif %}
      {% else %}
      -dir {{ ejbca_home }}/p12/
      {% endif %}
    args:
      chdir: "{{ ejbca_home }}"
    become_user: "{{ ejbca_user }}"
    become: yes
    register: ra_batch_result
    tags: certreq-cli-batch
    no_log: "{{ no_log_value }}"
    failed_when: ra_batch_result.rc >= 2
    changed_when: ra_batch_result.rc == 0

  #- debug:
      #msg: "Failed to create certs for username: {{ item.username }}"
      #var: ra_batch_result
    #when: 
    #  - "'FAILED' in endentity_exists.stderr"
    #failed_when: true

  when: 
    - "'does not exist' in endentity_exists.stdout"
  #when: endentity_exists.rc == 1
  tags: certreq-cli-batch

- name: Determine {{ item.username }} certificate serial number
  command: "openssl x509 -noout -serial -in {{ identity_batch_output_dir }}/pem/{{ item.name }}.pem"
  no_log: false
  register: cert_serialNumber
  tags: certreq-cli-batch
  when: 
    - item.useType is defined
    - (item.useType == "ra") or (item.useType == "va")
    - ra_batch_result is defined
    - ra_batch_result.changed|bool or
      ra_force_batch_again is defined and ra_force_batch_again|bool

- name: RA specific
  block:
    # This block is to use the certiicate serial number of the external RA TLS cert and add to the
    # RA peering role on the CA. If the RA peering role does not exist yet the fact created remains
    # that is used to create the RA peering role when configuring peering at a later time.

    - name: Create fact for RA {{ item.username }} certificate serial number
      set_fact: 
        cacheable: yes
        ra_peer_cert_serial_numbers: |
          [
          {{ '{' }}  'cert_serial_Number':'{{ cert_serialNumber.stdout.split('=')[1] }}', 'caname':'{{ item.caname }}' {{ '}' }},
          ]
      tags: certreq-cli-batch

    - name: Add serial number to the RA Peering Role
      include_role: 
        name: ansible-ejbca-ca-add-sn-to-admin-role
        tasks_from: peer_add_sn_to_role
      vars:
        ejbca_ra_admin_role_name: "RA-Peer-Connection"
        certificate_serial_number: "{{ ra_peer_cert_serial_numbers }}"
      no_log: "{{ no_log_value }}"

    - name: Write RA cert serial numbers to file for use with EJBCA VA or RA playbooks 
      become: no
      copy:
        dest: "{{ ejbca_csr_dir_output }}/ra_peer_cert_serial_numbers.yml"
        content: "{{ ra_peer_cert_serial_numbers| to_nice_yaml }}"
      delegate_to: localhost
      register: write_the_output
      no_log: "{{ no_log_value }}"
      tags: certreq-cli-batch
      when: 
        - ra_peer_cert_serial_numbers is defined

  when:
    #- ejbca_src_dir_name is defined 
    - item.useType is defined
    - (item.useType == "ra")
    - ra_batch_result is defined
    - ra_batch_result.changed|bool or 
      ra_force_batch_again is defined and ra_force_batch_again|bool
 
- name: VA Specific
  block:

    - name: Create fact for VA {{ item.username }} certificate serial number
      set_fact: 
        cacheable: yes
        va_peer_cert_serial_numbers: |
          [
          {{ '{' }}  'cert_serial_Number':'{{ cert_serialNumber.stdout.split('=')[1] }}', 'caname':'{{ item.caname }}' {{ '}' }},
          ]
      tags: certreq-cli-batch

    - name: Write VA cert serial numbers to file for use with EJBCA VA or RA playbooks 
      become: no
      copy:
        dest: "{{ ejbca_csr_dir_output }}/va_peer_cert_serial_numbers.yml"
        content: "{{ va_peer_cert_serial_numbers| to_nice_yaml }}"
      delegate_to: localhost
      register: write_the_output
      no_log: "{{ no_log_value }}"
      tags: certreq-cli-batch
      when:
        - va_peer_cert_serial_numbers is defined

  when: 
    #- ejbca_src_dir_name is defined
    - item.useType is defined
    - (item.useType == "va")
    - ra_batch_result is defined
    - ra_batch_result.changed|bool or
      ra_force_batch_again is defined and ra_force_batch_again|bool

- name: Create peer_cert_serial_numbers variable if it is empty
  include_role: 
    name: ansible-ejbca-key-binding
    tasks_from: get_akb_serial_numbers
  when:
    - peer_ca_cert_serial_numbers | length == 0

- name: Copy file to Ansible controller when PEM file and RA/VA/SS or External Root Node
  block:

    - name: Copy {{ item.username }} certificate file {{ identity_batch_output_dir }}/pem/{{ item.name }}.pem to localhost
      become: no
      fetch:
        src: "{{ identity_batch_output_dir }}/pem/{{ item.name }}.pem"
        dest: "{{ ejbca_csr_dir_output }}/{{ item.name }}.crt"
        flat: yes
      tags: certreq-cli-batch

    - name: Copy {{ item.username }} key file {{ identity_batch_output_dir }}/pem/{{ item.name }}-Key.pem to localhost
      become: no
      fetch:
        src: "{{ identity_batch_output_dir }}/pem/{{ item.name }}-Key.pem"
        dest: "{{ ejbca_csr_dir_output }}/{{ item.name }}.key"
        flat: yes
      tags: certreq-cli-batch

    - name: Copy {{ item.username }} CA chain file to localhost
      become: no
      fetch:
        src: "{{ identity_batch_output_dir }}/pem/{{ item.name }}-CA.pem"
        dest: "{{ ejbca_csr_dir_output }}/{{ item.caname }}.crt"
        flat: yes
      tags: certreq-cli-batch

  when:
    - item.token == 'PEM'
    - item.useType is defined
    - (item.useType == "ra") or (item.useType == "va") or (item.useType == "root") or (item.useType == "signserver")
    - ra_batch_result is defined
    - ra_batch_result.changed|bool or
      ra_force_batch_again is defined and ra_force_batch_again|bool

- name: Cleanup the cert files in /var/tmp
  file:
    path: "{{ identity_batch_output_dir }}/pem/"
    state: absent
  tags: certreq-cli-batch
  when:
    - item.token == 'PEM'
    - item.useType is defined
    - (item.useType == "ra") or (item.useType == "va") or (item.useType == "root") or (item.useType == "signserver")
    - ra_batch_result is defined
    - ra_batch_result.changed|bool
