---
# tasks file for roles/ansible-ejbca-key-binding

- name: Create cryptotoken for Authentication Key Binding
  include_role: 
    name: ansible-ejbca-crypto-token
    tasks_from: add_crypto_token
  loop: "{{ key_bindings }}"
  #vars:
  #  crypto_tokens: "{{ key_bindings }}"
  no_log: "{{ no_log_value }}"
  when: 
    - use_external_va|bool or use_external_ra|bool or use_external_ss|bool

- name: Generate keys for Authentication Key Binding on crypto token
  include_role:
    name: ansible-ejbca-crypto-token
    tasks_from: generate_keys
  loop: "{{ key_bindings |subelements('crypto_token') }}"
  loop_control:
    label: "{{ key_item.0.slot_identifier_value }}"
    loop_var: key_item
  no_log: "{{ no_log_value }}"
  tags: key_generation

- name: Query Authentication Key Binding
  command: "{{ ejbca_sh }} keybind list"
  no_log: "{{ no_log_value }}"
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_list
  changed_when: false
  failed_when: keybinding_list.rc >= 2

#- name: Debug keybinding_list
#  debug:
#    var: keybinding_list

#- name: Create Key binding in EJBCA
#  block:

- name: Generate Random Password
  set_fact:
    entity_pass: "{{ pass_15 }}"
  no_log: "{{ no_log_value }}"

- name: Create key binding for RA / SignServer / VA
  command: >
    {{ ejbca_sh }} keybind create 
    --name {{ item.0.name }} 
    --type AuthenticationKeyBinding 
    --token {{ item.0.crypto_token_name }} 
    --status ACTIVE  
    --alias {{ item.1.key_label }}  
    --sigalg {{ item.0.signature_algorithm }} 
    --cert null
  become: yes
  become_user: "{{ ejbca_user }}"
  loop: "{{ key_bindings |subelements('crypto_token') }}"
  loop_control:
    label: "{{ item.0.name }}"
  no_log: "{{ no_log_value }}"
  register: keybinding_create
  failed_when: keybinding_create.rc >= 2
  #changed_when: keybinding_create.rc == 0
  when: 
    - item.0.name not in keybinding_list.stdout
    - item.0.enabled|bool

- name: Create CSR for Authentication Key Binding
  command: >
    {{ ejbca_sh }} keybind gencsr 
    --name {{ item.name }} 
    -f /var/tmp/{{ item.name }}.csr
  args:
    creates: "/var/tmp/{{ item.name }}.csr"
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: "{{ no_log_value }}"
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_create_csr
  failed_when: keybinding_create_csr.rc >= 2
  #changed_when: keybinding_create_csr.rc == 0
  when: 
    - item.name not in keybinding_list.stdout
    - item.enabled|bool

- name: Create end entity 
  command: >
    {{ ejbca_sh }} ra addendentity
    --username "{{ item.name }}"
    --dn "{{ item.dn }}"
    --caname "{{ item.caname }}"
    --type 1
    --token {{ item.token }}
    --password {{ entity_pass }}
    --certprofile {{ item.certprofile }}
    --eeprofile {{ item.eeprofile }}
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: "{{ no_log_value }}"
  become_method: sudo
  become_user: "{{ ejbca_user }}"
  register: adding_keybind_end_entity
  failed_when: adding_keybind_end_entity.rc >= 2
  #changed_when: adding_keybind_end_entity.rc == 0
  when: 
    - item.name not in keybinding_list.stdout
    - item.enabled|bool 
 
#- debug:
#    msg: "Adding end entity failed with message: {{ item.0.stdout }}"
#  when: item.0.rc == 1 
#  loop: "{{ adding_keybind_end_entity.results }}"
#  loop_control:
#    label: "{{ item.0.item.0.name }}"
  
- name: Sign CSR for key binding 
  command: >
    {{ ejbca_sh }} createcert 
    --username {{ item.name }} 
    --password {{ entity_pass }} 
    -c /var/tmp/{{ item.name }}.csr 
    -f /var/tmp/{{ item.name }}.crt
  args:
    creates: "/var/tmp/{{ item.name }}.crt"
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: "{{ no_log_value }}"
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_sign_csr
  failed_when: keybinding_sign_csr.rc >= 2
  #changed_when: keybinding_sign_csr.rc == 0
  when: 
    - item.name not in keybinding_list.stdout
    - item.enabled|bool 

- name: Import cert for key binding 
  command: >
    {{ ejbca_sh }} keybind import 
    --name {{ item.name }} 
    -f /var/tmp/{{ item.name }}.crt
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: "{{ no_log_value }}"
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_import_cert
  failed_when: keybinding_import_cert.rc >= 2
  #changed_when: keybinding_import_cert.rc == 0
  when: 
    - item.name not in keybinding_list.stdout
    - item.enabled|bool 

- name: Activate key binding 
  command: >
    {{ ejbca_sh }} keybind setstatus 
    --name {{ item.name }} 
    -v Active
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: "{{ no_log_value }}"
  become: yes
  become_user: "{{ ejbca_user }}"
  register: keybinding_setstatus
  failed_when: keybinding_setstatus.rc >= 2
  #changed_when: keybinding_setstatus.rc == 0
  when: 
    - item.name not in keybinding_list.stdout
    - item.enabled|bool 

#TODO - Figure out why this can't be set via CLI, but works by setting in the UI
#- name: Set Next Key Pair Alias 
#  command: "{{ ejbca_sh }} keybind modify --name {{ item.0.name }} --nextkeypair {{ item.0.key_label }}"
#  no_log: "{{ no_log_value }}"
#  become: yes
#  become_user: "{{ ejbca_user }}"
#  register: keybinding_modify
#  loop: "{{ ejbca_keybinding }}"
#  when: item.0.name not in keybinding_list.stdout

- name: Determine certificate serial number
  command: "openssl x509 -noout -serial -in /var/tmp/{{ item.name }}.crt"
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: "{{ no_log_value }}"
  register: cert_serialNumber
  when: item.enabled|bool

#- name: Debug cert_serialNumber
#  debug:
#    var: cert_serialNumber

- name: Create fact for certificate serial numbers
  set_fact: 
    cacheable: yes
    peer_cert_serial_numbers: |
      [
      {% for line in cert_serialNumber.results %}
      {% if line.stdout is defined %}
      {{ '{' }}  'serial':'{{ line.stdout.split('=')[1] }}', 'name':'{{ line.item.name }}', 'type':'{{ line.item.useType}}', 'ca':'{{ line.item.caname}}' {{ '}' }},
      {% endif %}
      {% endfor %}
      ]

#- name: Create fact for certificate serial numbers
#  set_fact: 
#    cacheable: yes
#    peer_cert_serial_numbers: 
#      - cert_serial_Number: "{{ line.stdout.split('=')[1] }}"
#        name: "{{ line.item.0.name }}"
#        type: "{{ line.item.0.useType}}"

- name: Create local directory for {{ ejbca_csr_dir_output }}
  become: no
  file:
    path: "{{ ejbca_csr_dir_output }}"
    state: directory
  delegate_to: localhost

- name: Write cert serial numbers to {{ ejbca_csr_dir_output }}/peer_cert_serial_numbers.yml for use with EJBCA VA or RA playbooks 
  become: no
  copy:
    dest: "{{ ejbca_csr_dir_output }}/peer_cert_serial_numbers.yml"
    content: "{{ peer_cert_serial_numbers| to_nice_yaml }}"
  delegate_to: localhost
  register: write_the_output
  no_log: "{{ no_log_value }}"

- name: Write cert serial numbers to shared vars directory {{ sharedVarsLocation }}/peer_cert_serial_numbers.yml for use with EJBCA VA or RA playbooks 
  become: no
  copy:
    dest: "{{ sharedVarsLocation }}/peer_cert_serial_numbers.yml"
    content: "{{ peer_cert_serial_numbers| to_nice_yaml }}"
  delegate_to: localhost
  register: write_the_output2
  #no_log: "{{ no_log_value }}"

#  when: ( item.name not in keybinding_list.stdout ) and ( item.enabled|bool )
