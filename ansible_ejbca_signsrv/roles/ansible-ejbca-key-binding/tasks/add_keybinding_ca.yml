---
# tasks file for roles/ansible-ejbca-key-binding

- name: Create cryptotoken for Authentication Key Binding
  include_role: 
    name: ansible-ejbca-crypto-token
    tasks_from: add_crypto_token
  loop: "{{ key_bindings }}"
  no_log: false
  when: 
    - use_external_va|bool or use_external_ra|bool or use_external_ss|bool

- name: Generate keys for Authentication Key Binding on crypto token
  include_role:
    name: ansible-ejbca-crypto-token
    tasks_from: generate_keys
  loop: "{{ key_bindings|subelements('crypto_token') }}"
  loop_control:
    label: "{{ key_item.0.slot_identifier_value }}"
    loop_var: key_item
  no_log: false
  when: not key_item[0].name in active_bindings

- name: Generate Random Password
  set_fact:
    entity_pass: "{{ pass_15 }}"
  no_log: true

- name: Create key binding for RA / SignServer / VA
  ejbca_keybind:
    cmd: create
    bind: "{{ item.0.name }}"
    token: "{{ item.0.crypto_token_name }}"
    key: "{{ item.1.key_label }}"
    type: AuthenticationKeyBinding
    sigalg: "{{ item.0.signature_algorithm }}"
    path: "{{ ejbca_home }}"
  become: true
  become_user: "{{ ejbca_user }}"
  loop: "{{ key_bindings|subelements('crypto_token') }}"
  loop_control:
    label: "{{ item.0.name }}"
  no_log: true
  register: create_binding
  when: 
    - not item[0].name in active_bindings
    - item.0.enabled

- name: Create CSR for Authentication Key Binding
  ejbca_keybind:
    cmd: gencsr
    bind: "{{ item.name }}"
    file: "/var/tmp/{{ item.name }}.csr"
    path: "{{ ejbca_home }}"
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: false
  become: true
  become_user: "{{ ejbca_user }}"
  register: keybinding_create_csr
  when:
    - not item.name in active_bindings
    - item.enabled

- name: Create/Reset End Entities
  include_role:
    name: ansible-ejbca-end-entity
  loop: "{{ key_bindings }}"
  loop_control:
    loop_var: ee
    label: "{{ ee.name }}"
  when: 
    - ee.enabled
    - not ee.name in active_bindings

- name: Sign CSR for key binding 
  ejbca_createcert:
    username: "{{ item.name }}"
    password: "{{ entity_pass }}"
    csr: /var/tmp/{{ item.name }}.csr 
    cert: /var/tmp/{{ item.name }}.crt
    path: "{{ ejbca_home }}"
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: false
  become: true
  become_user: "{{ ejbca_user }}"
  register: keybinding_sign_csr
  when: 
    - not item.name in active_bindings
    - item.enabled

- name: Import cert for key binding
  ejbca_keybind:
    cmd: import
    bind: "{{ item.name }} "
    file: /var/tmp/{{ item.name }}.crt
    path: "{{ ejbca_home }}"
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  become: true
  become_user: "{{ ejbca_user }}"
  register: keybinding_import_cert
  when: 
    - not item.name in active_bindings
    - item.enabled

- name: Activate keybinding
  ejbca_keybind:
    cmd: setstatus
    bind: "{{ item.name }}"
    active: true
    path: "{{ ejbca_home }}"
  loop: "{{ key_bindings }}"
  loop_control:
    label: "{{ item.name }}"
  become: true
  become_user: "{{ ejbca_user }}"
  register: keybinding_setstatus
  when:
    - not item.name in active_bindings
    - item.enabled

- name: Query key bindings
  ejbca_keybind:
    cmd: list
    path: "{{ ejbca_home }}"
  become: true
  become_user: "{{ ejbca_user }}"
  register: keybindings_list

- name: Determine certificate serial numbers
  set_fact: 
    peer_cert_serial_numbers: "{{ peer_cert_serial_numbers + [{'name':item.name, 'cert':item.cert}] }}"
  vars:
    peer_cert_serial_numbers: []
  loop: "{{ keybindings_list.bindings }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.status == 'ACTIVE'

- name: Create local directory for {{ ejbca_csr_dir_output }}
  become: true
  file:
    path: "{{ ejbca_csr_dir_output }}"
    state: directory
  delegate_to: localhost

- name: Write cert serial numbers to {{ ejbca_csr_dir_output }}/peer_cert_serial_numbers.yml for use with EJBCA VA or RA playbooks 
  become: true
  copy:
    dest: "{{ ejbca_csr_dir_output }}/peer_cert_serial_numbers.yml"
    content: "{{ peer_cert_serial_numbers| to_nice_yaml }}"
  delegate_to: localhost
  register: write_the_output
  no_log: true

- name: Write cert serial numbers to shared vars directory {{ sharedVarsLocation }}/peer_cert_serial_numbers.yml for use with EJBCA VA or RA playbooks 
  become: true
  copy:
    dest: "{{ sharedVarsLocation }}/peer_cert_serial_numbers.yml"
    content: "{{ peer_cert_serial_numbers| to_nice_yaml }}"
  delegate_to: localhost
  register: write_the_output2
  #no_log: true

#  when: ( item.name not in keybinding_list.stdout ) and ( item.enabled|bool )
